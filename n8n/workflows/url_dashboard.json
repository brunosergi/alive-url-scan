{
  "name": "url_dashboard",
  "nodes": [
    {
      "parameters": {
        "html": "<style>\n\n/* ==========================================================================\n    Enhanced CSS Custom Properties & Root Configuration\n    ========================================================================== */\n:root {\n    /* Enhanced Color System */\n    --background: hsl(224, 71%, 4%);\n    --foreground: hsl(213, 31%, 91%);\n    --muted: hsl(223, 47%, 11%);\n    --muted-foreground: hsl(215, 20%, 65%);\n    --popover: hsl(224, 71%, 4%);\n    --popover-foreground: hsl(215, 20%, 65%);\n    --card: hsl(224, 71%, 4%);\n    --card-foreground: hsl(213, 31%, 91%);\n    --border: hsl(216, 34%, 17%);\n    --input: hsl(216, 34%, 17%);\n    --primary: hsl(210, 40%, 98%);\n    --primary-foreground: hsl(222, 84%, 5%);\n    --secondary: hsl(222, 47%, 11%);\n    --secondary-foreground: hsl(213, 31%, 91%);\n    --accent: hsl(216, 34%, 17%);\n    --accent-foreground: hsl(213, 31%, 91%);\n    --destructive: hsl(0, 63%, 31%);\n    --destructive-foreground: hsl(210, 40%, 98%);\n    --ring: hsl(216, 34%, 17%);\n    --radius: 8px;\n\n    /* Enhanced Status Colors */\n    --success: hsl(142, 69%, 58%);\n    --success-bg: hsla(142, 69%, 58%, 0.1);\n    --success-border: hsla(142, 69%, 58%, 0.2);\n    --warning: hsl(38, 92%, 50%);\n    --warning-bg: hsla(38, 92%, 50%, 0.1);\n    --warning-border: hsla(38, 92%, 50%, 0.2);\n    --error: hsl(0, 84%, 60%);\n    --error-bg: hsla(0, 84%, 60%, 0.1);\n    --error-border: hsla(0, 84%, 60%, 0.2);\n    --dns-error: hsl(300, 70%, 55%);\n    --dns-error-bg: hsla(300, 70%, 55%, 0.1);\n    --dns-error-border: hsla(300, 70%, 55%, 0.2);\n    --info: hsl(217, 91%, 60%);\n    --info-bg: hsla(217, 91%, 60%, 0.1);\n    --info-border: hsla(217, 91%, 60%, 0.2);\n\n    /* Enhanced Spacing Scale */\n    --space-1: 0.25rem;\n    --space-2: 0.5rem;\n    --space-3: 0.75rem;\n    --space-4: 1rem;\n    --space-5: 1.25rem;\n    --space-6: 1.5rem;\n    --space-8: 2rem;\n    --space-10: 2.5rem;\n    --space-12: 3rem;\n\n    /* Typography Scale */\n    --text-xs: 0.75rem;\n    --text-sm: 0.875rem;\n    --text-base: 1rem;\n    --text-lg: 1.125rem;\n    --text-xl: 1.25rem;\n    --text-2xl: 1.5rem;\n    --text-3xl: 1.875rem;\n    --text-4xl: 2.25rem;\n\n    /* Enhanced Shadows */\n    --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n    --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n    --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n    --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n    --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n\n    /* Animation Variables */\n    --transition-fast: 0.15s ease;\n    --transition-normal: 0.2s ease;\n    --transition-slow: 0.3s ease;\n}\n\n/* ==========================================================================\n    Base Styles & Reset\n    ========================================================================== */\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nhtml {\n    font-size: 16px;\n    line-height: 1.5;\n    scroll-behavior: smooth;\n}\n\nbody {\n    background: var(--background);\n    color: var(--foreground);\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\n/* ==========================================================================\n    Enhanced Layout Components\n    ========================================================================== */\n\n.dashboard-container {\n    min-height: 100vh;\n    background: var(--background);\n}\n\n.dashboard-header {\n    border-bottom: 1px solid var(--border);\n    background: var(--card);\n    position: sticky;\n    top: 0;\n    z-index: 40;\n    backdrop-filter: blur(8px);\n}\n\n.header-content {\n    max-width: 1400px;\n    margin: 0 auto;\n    padding: var(--space-8) var(--space-6);\n}\n\n.dashboard-title {\n    font-size: var(--text-3xl);\n    font-weight: 700;\n    letter-spacing: -0.025em;\n    margin-bottom: var(--space-2);\n    color: var(--foreground);\n    background: linear-gradient(135deg, var(--foreground) 0%, var(--muted-foreground) 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n}\n\n.dashboard-subtitle {\n    font-size: var(--text-base);\n    color: var(--muted-foreground);\n    max-width: 600px;\n}\n\n.dashboard-main {\n    max-width: 1400px;\n    margin: 0 auto;\n    padding: var(--space-6);\n}\n\n/* ==========================================================================\n    Enhanced Controls Panel\n    ========================================================================== */\n\n.controls-panel {\n    background: var(--card);\n    border: 1px solid var(--border);\n    border-radius: var(--radius);\n    padding: var(--space-6);\n    margin-bottom: var(--space-6);\n    box-shadow: var(--shadow-sm);\n    transition: box-shadow var(--transition-normal);\n}\n\n.controls-panel:hover {\n    box-shadow: var(--shadow-md);\n}\n\n.controls-row {\n    display: flex;\n    align-items: center;\n    gap: var(--space-6);\n    flex-wrap: wrap;\n}\n\n.search-section {\n    flex: 1;\n    min-width: 300px;\n}\n\n.search-container {\n    position: relative;\n    max-width: 400px;\n}\n\n.search-input {\n    width: 100%;\n    height: 40px;\n    padding: 0 var(--space-3) 0 var(--space-10);\n    background: var(--input);\n    border: 1px solid var(--border);\n    border-radius: var(--radius);\n    color: var(--foreground);\n    font-size: var(--text-sm);\n    transition: all var(--transition-normal);\n    outline: none;\n}\n\n.search-input:focus {\n    border-color: var(--info);\n    box-shadow: 0 0 0 2px var(--info-bg);\n    transform: translateY(-1px);\n}\n\n.search-input::placeholder {\n    color: var(--muted-foreground);\n}\n\n.search-icon {\n    position: absolute;\n    left: var(--space-3);\n    top: 50%;\n    transform: translateY(-50%);\n    color: var(--muted-foreground);\n    pointer-events: none;\n    transition: color var(--transition-normal);\n}\n\n.search-input:focus+.search-icon {\n    color: var(--info);\n}\n\n.action-controls {\n    display: flex;\n    gap: var(--space-4);\n    align-items: center;\n    flex-wrap: wrap;\n}\n\n.control-group {\n    display: flex;\n    gap: var(--space-2);\n    align-items: center;\n}\n\n.control-group-primary {\n    padding-left: var(--space-4);\n    border-left: 1px solid var(--border);\n}\n\n/* ==========================================================================\n    Enhanced Buttons & Controls\n    ========================================================================== */\n\n.control-btn {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: var(--space-2);\n    height: 40px;\n    padding: 0 var(--space-4);\n    border: 1px solid var(--border);\n    border-radius: var(--radius);\n    font-weight: 500;\n    font-size: var(--text-sm);\n    cursor: pointer;\n    transition: all var(--transition-normal);\n    text-decoration: none;\n    white-space: nowrap;\n    outline: none;\n    position: relative;\n    overflow: hidden;\n}\n\n.control-btn::before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);\n    transition: left var(--transition-slow);\n}\n\n.control-btn:hover::before {\n    left: 100%;\n}\n\n.control-btn:focus-visible {\n    box-shadow: 0 0 0 2px var(--info-bg);\n}\n\n.control-btn:active {\n    transform: translateY(1px);\n}\n\n.control-btn-primary {\n    background: var(--primary);\n    color: var(--primary-foreground);\n    border-color: var(--primary);\n    box-shadow: var(--shadow-sm);\n}\n\n.control-btn-primary:hover {\n    background: hsl(210, 40%, 95%);\n    box-shadow: var(--shadow-md);\n    transform: translateY(-1px);\n}\n\n.control-btn-secondary {\n    background: var(--secondary);\n    color: var(--secondary-foreground);\n    border-color: var(--border);\n}\n\n.control-btn-secondary:hover {\n    background: var(--accent);\n    border-color: var(--accent-foreground);\n    transform: translateY(-1px);\n}\n\n.control-btn-destructive {\n    background: var(--destructive);\n    color: var(--destructive-foreground);\n    border-color: var(--destructive);\n}\n\n.control-btn-destructive:hover {\n    background: hsl(0, 63%, 25%);\n    transform: translateY(-1px);\n}\n\n/* ==========================================================================\n    Enhanced Dropdown Components\n    ========================================================================== */\n\n.dropdown {\n    position: relative;\n}\n\n.dropdown-menu {\n    position: absolute;\n    top: calc(100% + var(--space-2));\n    right: 0;\n    min-width: 240px;\n    background: var(--popover);\n    border: 1px solid var(--border);\n    border-radius: var(--radius);\n    box-shadow: var(--shadow-xl);\n    padding: var(--space-3);\n    z-index: 50;\n    display: none;\n    opacity: 1;\n    transform: translateY(0);\n    transition: all var(--transition-normal);\n}\n\n/* Smart dropdown positioning for small screens */\n@media (max-width: 768px) {\n    .dropdown-menu {\n        right: auto;\n        left: 0;\n        min-width: 200px;\n        max-width: calc(100vw - 32px);\n    }\n\n    /* If dropdown would go off right edge, position from right */\n    .dropdown:last-child .dropdown-menu,\n    .dropdown.align-right .dropdown-menu {\n        right: 0;\n        left: auto;\n    }\n}\n\n.dropdown-header {\n    font-size: var(--text-xs);\n    font-weight: 600;\n    text-transform: uppercase;\n    letter-spacing: 0.05em;\n    color: var(--muted-foreground);\n    margin-bottom: var(--space-3);\n    padding: 0 var(--space-2);\n}\n\n.dropdown-item {\n    display: flex;\n    align-items: center;\n    gap: var(--space-3);\n    padding: var(--space-2);\n    cursor: pointer;\n    font-size: var(--text-sm);\n    border-radius: calc(var(--radius) - 2px);\n    transition: all var(--transition-fast);\n}\n\n.dropdown-item:hover {\n    background: var(--accent);\n    transform: translateX(2px);\n}\n\n.dropdown-item-clickable {\n    cursor: pointer;\n}\n\n.dropdown-actions {\n    display: flex;\n    justify-content: space-between;\n    margin-top: var(--space-4);\n    gap: var(--space-2);\n    padding-top: var(--space-3);\n    border-top: 1px solid var(--border);\n}\n\n.dropdown-btn {\n    flex: 1;\n    height: 32px;\n    padding: 0 var(--space-3);\n    border: 1px solid var(--border);\n    border-radius: calc(var(--radius) - 2px);\n    font-size: var(--text-xs);\n    font-weight: 500;\n    cursor: pointer;\n    transition: all var(--transition-fast);\n    outline: none;\n}\n\n.dropdown-btn-ghost {\n    background: transparent;\n    color: var(--muted-foreground);\n}\n\n.dropdown-btn-ghost:hover {\n    background: var(--accent);\n    color: var(--accent-foreground);\n}\n\n.dropdown-btn-primary {\n    background: var(--primary);\n    color: var(--primary-foreground);\n    border-color: var(--primary);\n}\n\n.dropdown-btn-primary:hover {\n    background: hsl(210, 40%, 95%);\n}\n\n/* ==========================================================================\n    Enhanced Table Section\n    ========================================================================== */\n\n.table-section {\n    background: var(--card);\n    border: 1px solid var(--border);\n    border-radius: var(--radius);\n    overflow: hidden;\n    box-shadow: var(--shadow-sm);\n    transition: box-shadow var(--transition-normal);\n}\n\n.table-section:hover {\n    box-shadow: var(--shadow-md);\n}\n\n.table-container {\n    overflow-x: auto;\n    overflow-y: auto;\n    max-height: 70vh;\n    -webkit-overflow-scrolling: touch;\n    position: relative;\n}\n\n/* Enhanced scroll indicators */\n.table-container::before,\n.table-container::after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 20px;\n    pointer-events: none;\n    z-index: 5;\n    transition: opacity var(--transition-normal);\n}\n\n.table-container::before {\n    left: 0;\n    background: linear-gradient(90deg, var(--card), transparent);\n}\n\n.table-container::after {\n    right: 0;\n    background: linear-gradient(-90deg, var(--card), transparent);\n}\n\n.data-table {\n    width: 100%;\n    border-collapse: collapse;\n    min-width: 1200px;\n    table-layout: auto;\n}\n\n/* Enhanced column sizing with proper minimum widths */\n.table-header:nth-child(1) {\n    width: 50px;\n    min-width: 50px;\n    max-width: 50px;\n}\n\n/* Checkbox */\n\n.table-header:nth-child(2) {\n    width: 280px;\n    min-width: 200px;\n}\n\n/* URL */\n\n.table-header:nth-child(3) {\n    width: 140px;\n    min-width: 120px;\n    max-width: 160px;\n}\n\n/* Status */\n\n.table-header:nth-child(4) {\n    width: 280px;\n    min-width: 220px;\n}\n\n/* Summary */\n\n.table-header:nth-child(5) {\n    width: 200px;\n    min-width: 160px;\n    max-width: 280px;\n}\n\n/* Tags */\n\n.table-header:nth-child(6) {\n    width: 120px;\n    min-width: 100px;\n    max-width: 140px;\n}\n\n/* Screenshot */\n\n.table-header:nth-child(7) {\n    width: 100px;\n    min-width: 90px;\n    max-width: 110px;\n}\n\n/* Created Date */\n\n.table-header:nth-child(8) {\n    width: 100px;\n    min-width: 90px;\n    max-width: 110px;\n}\n\n/* Last Scan */\n\n.table-header:nth-child(9) {\n    width: 100px;\n    min-width: 90px;\n    max-width: 120px;\n}\n\n/* Source */\n\n.table-header {\n    position: sticky;\n    top: 0;\n    z-index: 10;\n    background: var(--muted);\n    color: var(--muted-foreground);\n    font-weight: 600;\n    font-size: var(--text-xs);\n    text-transform: uppercase;\n    letter-spacing: 0.05em;\n    padding: var(--space-4);\n    text-align: left;\n    border-bottom: 1px solid var(--border);\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.table-header-checkbox {\n    width: 48px;\n    text-align: center;\n}\n\n.data-table td {\n    padding: var(--space-4);\n    border-bottom: 1px solid var(--border);\n    vertical-align: top;\n    font-size: var(--text-sm);\n    word-wrap: break-word;\n    overflow-wrap: break-word;\n    height: auto;\n    min-height: 60px;\n}\n\n/* Apply same column constraints to table cells */\n.data-table td:nth-child(1) {\n    width: 50px;\n    min-width: 50px;\n    max-width: 50px;\n}\n\n.data-table td:nth-child(2) {\n    width: 280px;\n    min-width: 200px;\n}\n\n.data-table td:nth-child(3) {\n    width: 140px;\n    min-width: 120px;\n    max-width: 160px;\n}\n\n.data-table td:nth-child(4) {\n    width: 280px;\n    min-width: 220px;\n}\n\n.data-table td:nth-child(5) {\n    width: 200px;\n    min-width: 160px;\n    max-width: 280px;\n}\n\n.data-table td:nth-child(6) {\n    width: 140px;\n    min-width: 120px;\n    max-width: 180px;\n}\n\n.data-table td:nth-child(7) {\n    width: 100px;\n    min-width: 90px;\n    max-width: 110px;\n}\n\n.data-table td:nth-child(8) {\n    width: 100px;\n    min-width: 90px;\n    max-width: 110px;\n}\n\n.data-table td:nth-child(9) {\n    width: 100px;\n    min-width: 90px;\n    max-width: 120px;\n    position: relative;\n}\n\n/* Text handling for date columns */\n.data-table td:nth-child(7),\n.data-table td:nth-child(8) {\n    font-size: var(--text-xs);\n    white-space: normal;\n}\n\n/* Date-time container styling */\n.date-time-container {\n    display: flex;\n    flex-direction: column;\n    gap: 2px;\n    line-height: 1.2;\n}\n\n.date-line {\n    font-weight: 500;\n    color: var(--foreground);\n}\n\n.time-line {\n    font-size: var(--text-xs);\n    color: var(--muted-foreground);\n    opacity: 0.8;\n}\n\n/* Source column - allow full text display */\n.data-table td:nth-child(9) {\n    font-size: var(--text-xs);\n    word-wrap: break-word;\n    overflow-wrap: break-word;\n    white-space: normal;\n}\n\n/* Summary column specific styling - allow full content */\n.data-table td:nth-child(4) p {\n    margin: 0;\n    line-height: 1.4;\n    white-space: pre-wrap;\n    word-break: break-word;\n    max-width: 100%;\n}\n\n.data-table tbody tr {\n    transition: all var(--transition-fast);\n}\n\n.data-table tbody tr:nth-child(even) {\n    background: hsla(216, 34%, 17%, 0.1);\n}\n\n.data-table tbody tr:hover {\n    background: hsla(216, 34%, 17%, 0.3);\n    transform: translateX(2px);\n}\n\n/* Enhanced Checkbox Styling - Consistent for all checkboxes */\ninput[type=\"checkbox\"] {\n    width: 18px;\n    height: 18px;\n    cursor: pointer;\n    transition: transform var(--transition-fast);\n    accent-color: var(--info);\n    border-radius: 3px;\n}\n\ninput[type=\"checkbox\"]:hover {\n    transform: scale(1.1);\n}\n\n.table-checkbox {\n    width: 18px;\n    height: 18px;\n    cursor: pointer;\n    accent-color: var(--info);\n    transition: transform var(--transition-fast);\n}\n\n.table-checkbox:hover {\n    transform: scale(1.1);\n}\n\n\n/* Ensure dropdown checkboxes match */\n.dropdown-item input[type=\"radio\"],\n.dropdown-item input[type=\"checkbox\"] {\n    width: 18px;\n    height: 18px;\n    accent-color: var(--info);\n    flex-shrink: 0;\n    transition: transform var(--transition-fast);\n}\n\n.dropdown-item input[type=\"radio\"]:hover,\n.dropdown-item input[type=\"checkbox\"]:hover {\n    transform: scale(1.1);\n}\n\n/* Enhanced Status Badges */\n.status-badge {\n    display: inline-flex;\n    align-items: center;\n    padding: var(--space-1) var(--space-3);\n    border-radius: 9999px;\n    font-size: var(--text-xs);\n    font-weight: 500;\n    text-transform: uppercase;\n    letter-spacing: 0.025em;\n    border: 1px solid transparent;\n    transition: all var(--transition-fast);\n}\n\n.status-badge:hover {\n    transform: translateY(-1px);\n}\n\n.status-success {\n    background: var(--success-bg);\n    color: var(--success);\n    border-color: var(--success-border);\n}\n\n.status-error {\n    background: var(--error-bg);\n    color: var(--error);\n    border-color: var(--error-border);\n}\n\n.status-dns-error {\n    background: var(--dns-error-bg);\n    color: var(--dns-error);\n    border-color: var(--dns-error-border);\n}\n\n.status-info {\n    background: var(--info-bg);\n    color: var(--info);\n    border-color: var(--info-border);\n}\n\n.status-redirect {\n    background: var(--warning-bg);\n    color: var(--warning);\n    border-color: var(--warning-border);\n}\n\n/* Enhanced Links */\n.link {\n    color: var(--info);\n    text-decoration: none;\n    display: inline-flex;\n    align-items: center;\n    gap: var(--space-2);\n    font-weight: 500;\n    transition: all var(--transition-fast);\n    max-width: 100%;\n    line-height: 1.4;\n    position: relative;\n}\n\n.link:hover {\n    text-decoration: underline;\n    color: hsl(217, 91%, 70%);\n    transform: translateX(2px);\n}\n\n.url-text {\n    word-break: break-all;\n    overflow-wrap: break-word;\n    white-space: normal;\n    flex: 1;\n    min-width: 0;\n}\n\n.external-link-icon {\n    opacity: 0.7;\n    transition: all var(--transition-fast);\n    flex-shrink: 0;\n    margin-left: var(--space-1);\n    position: relative;\n    top: 1px;\n}\n\n.link:hover .external-link-icon {\n    opacity: 1;\n    transform: translateX(2px);\n}\n\n/* Empty cell styling for unscanned URLs */\n.data-table td:empty {\n    min-height: 40px;\n    position: relative;\n}\n\n.data-table td:empty::after {\n    content: \"\";\n    display: block;\n    height: 1px;\n    opacity: 0;\n}\n\n/* Enhanced Screenshot Thumbnails */\n.screenshot-thumbnail {\n    max-width: 160px;\n    height: auto;\n    border-radius: var(--radius);\n    cursor: pointer;\n    border: 1px solid var(--border);\n    transition: all var(--transition-normal);\n    position: relative;\n    overflow: hidden;\n}\n\n.screenshot-thumbnail::before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.1);\n    opacity: 0;\n    transition: opacity var(--transition-normal);\n}\n\n.screenshot-thumbnail:hover {\n    transform: scale(1.05);\n    box-shadow: var(--shadow-lg);\n}\n\n.screenshot-thumbnail:hover::before {\n    opacity: 1;\n}\n\n/* Enhanced No Results State */\n.no-results {\n    display: none;\n    padding: var(--space-12) var(--space-6);\n    text-align: center;\n}\n\n.no-results-content {\n    max-width: 400px;\n    margin: 0 auto;\n}\n\n.no-results-icon {\n    color: var(--muted-foreground);\n    margin-bottom: var(--space-4);\n    animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n\n    0%,\n    100% {\n        opacity: 1;\n    }\n\n    50% {\n        opacity: 0.5;\n    }\n}\n\n.no-results-title {\n    font-size: var(--text-lg);\n    font-weight: 600;\n    color: var(--foreground);\n    margin-bottom: var(--space-2);\n}\n\n.no-results-description {\n    color: var(--muted-foreground);\n    font-size: var(--text-sm);\n    line-height: 1.5;\n}\n\n\n/* ==========================================================================\n    Enhanced Pagination\n    ========================================================================== */\n\n.pagination-container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: var(--space-5) var(--space-6);\n    border-top: 1px solid var(--border);\n    background: var(--card);\n    min-height: 72px;\n}\n\n.pagination-info {\n    display: flex;\n    align-items: center;\n    gap: var(--space-5);\n}\n\n.pagination-select-wrapper {\n    position: relative;\n}\n\n.pagination-select {\n    appearance: none;\n    padding: var(--space-2) var(--space-8) var(--space-2) var(--space-3);\n    background: var(--input);\n    border: 1px solid var(--border);\n    border-radius: var(--radius);\n    color: var(--foreground);\n    font-size: var(--text-sm);\n    cursor: pointer;\n    transition: all var(--transition-normal);\n    outline: none;\n    min-width: 120px;\n}\n\n.pagination-select:focus {\n    border-color: var(--info);\n    box-shadow: 0 0 0 2px var(--info-bg);\n}\n\n.pagination-select-wrapper::after {\n    content: \"\";\n    position: absolute;\n    right: var(--space-3);\n    top: 50%;\n    transform: translateY(-50%);\n    width: 0;\n    height: 0;\n    border-left: 4px solid transparent;\n    border-right: 4px solid transparent;\n    border-top: 4px solid var(--muted-foreground);\n    pointer-events: none;\n    transition: transform var(--transition-fast);\n}\n\n.pagination-select:focus+.pagination-select-wrapper::after {\n    transform: translateY(-50%) rotate(180deg);\n}\n\n.pagination-text {\n    color: var(--muted-foreground);\n    font-size: var(--text-sm);\n    font-weight: 500;\n}\n\n.pagination-controls {\n    display: flex;\n    align-items: center;\n    gap: var(--space-1);\n}\n\n.pagination-btn {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 36px;\n    height: 36px;\n    background: var(--secondary);\n    color: var(--secondary-foreground);\n    border: 1px solid var(--border);\n    border-radius: var(--radius);\n    cursor: pointer;\n    transition: all var(--transition-fast);\n    outline: none;\n}\n\n.pagination-btn:hover:not(:disabled) {\n    background: var(--accent);\n    border-color: var(--accent-foreground);\n    transform: translateY(-1px);\n}\n\n.pagination-btn:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n}\n\n.page-numbers {\n    display: flex;\n    gap: var(--space-1);\n    margin: 0 var(--space-3);\n}\n\n.page-number {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    min-width: 36px;\n    height: 36px;\n    padding: 0 var(--space-2);\n    border: 1px solid var(--border);\n    background: transparent;\n    color: var(--muted-foreground);\n    border-radius: var(--radius);\n    cursor: pointer;\n    font-size: var(--text-sm);\n    font-weight: 500;\n    transition: all var(--transition-fast);\n    outline: none;\n}\n\n.page-number:hover {\n    background: var(--accent);\n    color: var(--accent-foreground);\n    transform: translateY(-1px);\n}\n\n.page-number.active {\n    background: var(--primary);\n    color: var(--primary-foreground);\n    border-color: var(--primary);\n    box-shadow: var(--shadow-sm);\n}\n\n/* ==========================================================================\n    Enhanced Modal\n    ========================================================================== */\n\n.modal-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    opacity: 0;\n    pointer-events: none;\n    transition: opacity var(--transition-slow);\n    z-index: 1000;\n}\n\n.modal-overlay.active {\n    opacity: 1;\n    pointer-events: all;\n}\n\n.modal-backdrop {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.8);\n    backdrop-filter: blur(8px);\n}\n\n.modal-content {\n    position: relative;\n    max-width: 90vw;\n    max-height: 90vh;\n    z-index: 1001;\n    transform: scale(0.9);\n    transition: transform var(--transition-slow);\n}\n\n.modal-overlay.active .modal-content {\n    transform: scale(1);\n}\n\n.modal-close {\n    position: absolute;\n    top: -48px;\n    right: 0;\n    width: 40px;\n    height: 40px;\n    background: rgba(0, 0, 0, 0.5);\n    border: none;\n    border-radius: var(--radius);\n    color: white;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: all var(--transition-normal);\n    z-index: 1002;\n}\n\n.modal-close:hover {\n    background: rgba(0, 0, 0, 0.7);\n    transform: scale(1.1);\n}\n\n.modal-image {\n    width: 100%;\n    height: 100%;\n    object-fit: contain;\n    border-radius: var(--radius);\n    box-shadow: var(--shadow-xl);\n}\n\n/* ==========================================================================\n    Enhanced Scrollbar Styling\n    ========================================================================== */\n\n::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n}\n\n::-webkit-scrollbar-track {\n    background: transparent;\n}\n\n::-webkit-scrollbar-thumb {\n    background: var(--muted);\n    border-radius: 4px;\n    border: 2px solid transparent;\n    background-clip: padding-box;\n    transition: background var(--transition-normal);\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: var(--border);\n    background-clip: padding-box;\n}\n\n::-webkit-scrollbar-corner {\n    background: transparent;\n}\n\n* {\n    scrollbar-width: thin;\n    scrollbar-color: var(--muted) transparent;\n}\n\n/* ==========================================================================\n    Enhanced Responsive Design\n    ========================================================================== */\n\n@media (max-width: 1024px) {\n    .dashboard-main {\n        padding: var(--space-4);\n    }\n\n    .controls-panel {\n        padding: var(--space-4);\n    }\n\n    .controls-row {\n        gap: var(--space-4);\n    }\n\n    .dashboard-title {\n        font-size: var(--text-2xl);\n    }\n}\n\n@media (max-width: 768px) {\n    .header-content {\n        padding: var(--space-6) var(--space-4);\n    }\n\n    .dashboard-title {\n        font-size: var(--text-xl);\n    }\n\n    .dashboard-main {\n        padding: var(--space-3);\n    }\n\n    .controls-panel {\n        padding: var(--space-4);\n    }\n\n    .controls-row {\n        flex-direction: column;\n        align-items: stretch;\n        gap: var(--space-4);\n    }\n\n    .search-section {\n        min-width: auto;\n    }\n\n    .search-container {\n        max-width: none;\n    }\n\n    .action-controls {\n        justify-content: center;\n        flex-wrap: wrap;\n        gap: var(--space-2);\n    }\n\n    .control-group {\n        gap: var(--space-1);\n    }\n\n    .control-group-primary {\n        padding-left: 0;\n        border-left: none;\n        padding-top: var(--space-4);\n        border-top: 1px solid var(--border);\n        width: 100%;\n        justify-content: center;\n    }\n\n    .control-btn {\n        font-size: var(--text-xs);\n        padding: 0 var(--space-3);\n        height: 36px;\n        flex: 1;\n        min-width: 0;\n    }\n\n    .data-table {\n        min-width: 1000px;\n        font-size: var(--text-xs);\n    }\n\n    /* Adjust column widths for mobile - use smaller but consistent sizing */\n    .table-header:nth-child(1),\n    .data-table td:nth-child(1) {\n        width: 40px;\n        min-width: 40px;\n        max-width: 40px;\n    }\n\n    .table-header:nth-child(2),\n    .data-table td:nth-child(2) {\n        width: 180px;\n        min-width: 130px;\n    }\n\n    .table-header:nth-child(3),\n    .data-table td:nth-child(3) {\n        width: 80px;\n        min-width: 70px;\n        max-width: 90px;\n    }\n\n    .table-header:nth-child(4),\n    .data-table td:nth-child(4) {\n        width: 200px;\n        min-width: 160px;\n    }\n\n    .table-header:nth-child(5),\n    .data-table td:nth-child(5) {\n        width: 150px;\n        min-width: 120px;\n        max-width: 200px;\n    }\n\n    .table-header:nth-child(6),\n    .data-table td:nth-child(6) {\n        width: 80px;\n        min-width: 70px;\n        max-width: 90px;\n    }\n\n    .table-header:nth-child(7),\n    .data-table td:nth-child(7) {\n        width: 80px;\n        min-width: 75px;\n        max-width: 85px;\n    }\n\n    .table-header:nth-child(8),\n    .data-table td:nth-child(8) {\n        width: 80px;\n        min-width: 75px;\n        max-width: 85px;\n    }\n\n    .table-header:nth-child(9),\n    .data-table td:nth-child(9) {\n        width: 60px;\n        min-width: 55px;\n        max-width: 65px;\n    }\n\n    .table-header,\n    .data-table td {\n        padding: var(--space-2);\n    }\n\n    .screenshot-thumbnail {\n        max-width: 100px;\n    }\n\n    .link {\n        max-width: 100%;\n        font-size: var(--text-xs);\n    }\n\n    .pagination-container {\n        flex-direction: column;\n        gap: var(--space-4);\n        align-items: stretch;\n        padding: var(--space-4);\n    }\n\n    .pagination-info {\n        justify-content: center;\n        flex-wrap: wrap;\n        gap: var(--space-3);\n    }\n\n    .pagination-controls {\n        justify-content: center;\n    }\n\n    .modal-close {\n        top: -40px;\n        width: 36px;\n        height: 36px;\n    }\n\n    .dropdown-menu {\n        min-width: 200px;\n        left: 0;\n        right: auto;\n        max-width: calc(100vw - 20px);\n    }\n}\n\n@media (max-width: 480px) {\n    .dashboard-title {\n        font-size: var(--text-lg);\n    }\n\n    .control-btn {\n        font-size: var(--text-xs);\n        padding: 0 var(--space-2);\n        height: 32px;\n    }\n\n    .control-group {\n        flex-direction: column;\n        width: 100%;\n    }\n\n    .control-btn {\n        width: 100%;\n    }\n\n    .dropdown-menu {\n        min-width: 180px;\n        max-width: calc(100vw - 16px);\n    }\n\n    .table-container {\n        max-height: 60vh;\n    }\n\n    .data-table {\n        min-width: 900px;\n    }\n\n    /* Even smaller adjustments for very small screens */\n    .table-header:nth-child(1),\n    .data-table td:nth-child(1) {\n        width: 35px;\n        min-width: 35px;\n        max-width: 35px;\n    }\n\n    .table-header:nth-child(2),\n    .data-table td:nth-child(2) {\n        width: 160px;\n        min-width: 120px;\n    }\n\n    .table-header:nth-child(3),\n    .data-table td:nth-child(3) {\n        width: 70px;\n        min-width: 60px;\n        max-width: 80px;\n    }\n\n    .table-header:nth-child(4),\n    .data-table td:nth-child(4) {\n        width: 180px;\n        min-width: 140px;\n    }\n\n    .table-header:nth-child(5),\n    .data-table td:nth-child(5) {\n        width: 120px;\n        min-width: 100px;\n        max-width: 160px;\n    }\n\n    .table-header:nth-child(6),\n    .data-table td:nth-child(6) {\n        width: 70px;\n        min-width: 60px;\n        max-width: 80px;\n    }\n\n    .table-header:nth-child(7),\n    .data-table td:nth-child(7) {\n        width: 70px;\n        min-width: 65px;\n        max-width: 75px;\n    }\n\n    .table-header:nth-child(8),\n    .data-table td:nth-child(8) {\n        width: 70px;\n        min-width: 65px;\n        max-width: 75px;\n    }\n\n    .table-header:nth-child(9),\n    .data-table td:nth-child(9) {\n        width: 50px;\n        min-width: 45px;\n        max-width: 55px;\n    }\n}\n  \n\n/* ==========================================================================\n    Loading States & Animations\n    ========================================================================== */\n\n@keyframes shimmer {\n    0% {\n        background-position: -200px 0;\n    }\n\n    100% {\n        background-position: calc(200px + 100%) 0;\n    }\n}\n\n.loading-shimmer {\n    background: linear-gradient(90deg, var(--muted) 0px, var(--accent) 40px, var(--muted) 80px);\n    background-size: 200px 100%;\n    animation: shimmer 1.5s infinite;\n}\n\n/* Focus visible improvements */\n.control-btn:focus-visible,\n.search-input:focus-visible,\n.pagination-select:focus-visible,\n.pagination-btn:focus-visible,\n.page-number:focus-visible {\n    outline: 2px solid var(--info);\n    outline-offset: 2px;\n}\n\n/* Reduced motion preferences */\n@media (prefers-reduced-motion: reduce) {\n\n    *,\n    *::before,\n    *::after {\n        animation-duration: 0.01ms !important;\n        animation-iteration-count: 1 !important;\n        transition-duration: 0.01ms !important;\n    }\n}\n\n/* Enhanced Tag Badges */\n.tags-container {\n    display: flex;\n    flex-wrap: wrap;\n    gap: var(--space-1);\n    align-items: flex-start;\n    position: relative;\n}\n\n.tag-badge {\n    display: inline-flex;\n    align-items: center;\n    padding: 2px var(--space-2);\n    border-radius: 4px;\n    font-size: 10px;\n    font-weight: 600;\n    text-transform: uppercase;\n    letter-spacing: 0.025em;\n    border: 1px solid transparent;\n    transition: all var(--transition-fast);\n    white-space: nowrap;\n    line-height: 1.2;\n}\n\n.tag-badge:hover {\n    transform: translateY(-1px) scale(1.05);\n    z-index: 2;\n}\n\n/* Tag color variations based on security assessment */\n.tag-high-risk,\n.tag-suspicious,\n.tag-blocked,\n.tag-malicious {\n    background: var(--error-bg);\n    color: var(--error);\n    border-color: var(--error-border);\n}\n\n.tag-medium-risk,\n.tag-warning,\n.tag-urgent-language,\n.tag-financial {\n    background: var(--warning-bg);\n    color: var(--warning);\n    border-color: var(--warning-border);\n}\n\n.tag-low-risk,\n.tag-legitimate,\n.tag-corporate,\n.tag-professional,\n.tag-ssl {\n    background: var(--success-bg);\n    color: var(--success);\n    border-color: var(--success-border);\n}\n\n.tag-info,\n.tag-brazil,\n.tag-global,\n.tag-retail,\n.tag-ecommerce,\n.tag-banking,\n.tag-cloudflare {\n    background: var(--info-bg);\n    color: var(--info);\n    border-color: var(--info-border);\n}\n\n/* Dynamic color generation for unknown tags using CSS hashing */\n.tag-badge {\n    --tag-hue: calc(var(--tag-hash, 0) * 137.5deg);\n    --tag-bg: hsla(var(--tag-hue), 60%, 50%, 0.1);\n    --tag-color: hsla(var(--tag-hue), 60%, 60%, 1);\n    --tag-border: hsla(var(--tag-hue), 60%, 50%, 0.2);\n}\n\n/* Default tag styling for unclassified tags with random colors */\n.tag-badge:not([class*=\"tag-high-risk\"]):not([class*=\"tag-suspicious\"]):not([class*=\"tag-blocked\"]):not([class*=\"tag-malicious\"]):not([class*=\"tag-medium-risk\"]):not([class*=\"tag-warning\"]):not([class*=\"tag-urgent-language\"]):not([class*=\"tag-financial\"]):not([class*=\"tag-low-risk\"]):not([class*=\"tag-legitimate\"]):not([class*=\"tag-corporate\"]):not([class*=\"tag-professional\"]):not([class*=\"tag-ssl\"]):not([class*=\"tag-info\"]):not([class*=\"tag-brazil\"]):not([class*=\"tag-global\"]):not([class*=\"tag-retail\"]):not([class*=\"tag-ecommerce\"]):not([class*=\"tag-banking\"]):not([class*=\"tag-cloudflare\"]) {\n    background: var(--tag-bg);\n    color: var(--tag-color);\n    border-color: var(--tag-border);\n}\n\n/* Tags overflow indicator */\n.tags-container::after {\n    content: \"\";\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    width: 20px;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, var(--card));\n    pointer-events: none;\n    opacity: 0;\n    transition: opacity var(--transition-normal);\n}\n\n.tags-container.has-overflow::after {\n    opacity: 1;\n}\n\n</style>"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        20,
        240
      ],
      "id": "222ff546-59a2-4055-a88e-6f74a45b92bd",
      "name": "CSS"
    },
    {
      "parameters": {
        "html": "<script>\ndocument.addEventListener('DOMContentLoaded', () => {\n    /**\n     * Use an IIFE to create a private scope and avoid polluting the global namespace.\n     */\n    (() => {\n        // ==========================================================================\n        // DOM Element Selection\n        // ==========================================================================\n        const tableBody = document.getElementById('report-table-body');\n        const selectAllCheckbox = document.getElementById('select-all-checkbox');\n        const deleteButton = document.getElementById('delete-selected-button');\n        const scanButton = document.getElementById('scan-button');\n        const uploadButton = document.getElementById('upload-button');\n        const textFilterInput = document.getElementById('text-filter-input');\n        const modal = document.getElementById('screenshot-modal');\n        const modalImage = document.getElementById('modal-image');\n        const noResultsMessage = document.getElementById('no-results-message');\n        const paginationSection = document.getElementById('pagination-section');\n\n        // Filter Controls\n        const filterButton = document.getElementById('filter-button');\n        const filterDropdown = document.getElementById('filter-dropdown');\n        const applyFiltersBtn = document.getElementById('apply-filters');\n        const clearFiltersBtn = document.getElementById('clear-filters');\n        const statusFilterCheckboxes = document.querySelectorAll('.status-filter');\n\n        // Sort Controls\n        const sortButton = document.getElementById('sort-button');\n        const sortDropdown = document.getElementById('sort-dropdown');\n        const applySortBtn = document.getElementById('apply-sort');\n        const clearSortBtn = document.getElementById('clear-sort');\n\n        // Export Controls\n        const exportButton = document.getElementById('export-button');\n        const exportDropdown = document.getElementById('export-dropdown');\n        const exportCsv = document.getElementById('export-csv');\n        const exportJson = document.getElementById('export-json');\n        const exportTxt = document.getElementById('export-txt');\n\n        // ==========================================================================\n        // Application State & Supabase Real-time Setup\n        // ==========================================================================\n        const state = {\n            originalRows: [],\n            supabaseClient: null,\n            realTimeSubscription: null,\n            activeScanIds: new Set(),\n            persistentToast: null\n        };\n\n        // Simple scan state management without complex caching\n        const scanStateManager = {\n            // Check if scan is active\n            isScanActive: (id) => {\n                return state.activeScanIds.has(id);\n            },\n            \n            // Start scanning items\n            startScanning: (scanIds) => {\n                scanIds.forEach(id => state.activeScanIds.add(id));\n                scanStateManager.markRowsAsScanning(scanIds);\n                scanStateManager.updateToast();\n                console.log('🎯 Started scanning:', scanIds);\n            },\n            \n            // Finish scanning items\n            finishScanning: (scanIds) => {\n                scanIds.forEach(id => state.activeScanIds.delete(id));\n                \n                // Re-enable checkboxes\n                scanIds.forEach(id => {\n                    const row = tableBody.querySelector(`tr[data-id=\"${id}\"]`);\n                    if (row) {\n                        const checkbox = row.querySelector('.row-selector');\n                        if (checkbox) {\n                            checkbox.disabled = false;\n                            checkbox.title = '';\n                            checkbox.style.opacity = '1';\n                            checkbox.style.cursor = 'pointer';\n                        }\n                    }\n                });\n                \n                scanStateManager.updateToast();\n                console.log('🎯 Finished scanning:', scanIds);\n            },\n            \n            updateToast: () => {\n                const hasActiveScans = state.activeScanIds.size > 0;\n                console.log('🔍 updateToast - Active scans:', hasActiveScans, 'Count:', state.activeScanIds.size);\n                console.log('🔍 Active scan IDs:', Array.from(state.activeScanIds));\n                \n                if (hasActiveScans) {\n                    scanStateManager.showToast();\n                } else {\n                    scanStateManager.hideToast();\n                }\n            },\n            \n            showToast: () => {\n                if (state.persistentToast) {\n                    state.persistentToast.remove();\n                }\n                \n                const scanCount = state.activeScanIds.size;\n                const message = `🔍 ${scanCount} URL scan${scanCount > 1 ? 's' : ''} in progress...`;\n                \n                const toast = document.createElement('div');\n                toast.className = 'persistent-scan-toast';\n                toast.innerHTML = `\n                    <div class=\"toast-content\">\n                        <span class=\"pulse-indicator\"></span>\n                        <span class=\"toast-text\">${message}</span>\n                    </div>\n                `;\n                \n                toast.style.cssText = `\n                    position: fixed;\n                    top: 20px;\n                    left: 50%;\n                    transform: translateX(-50%);\n                    padding: 12px 20px;\n                    border-radius: 8px;\n                    font-weight: 600;\n                    font-size: 14px;\n                    z-index: 10001;\n                    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n                    backdrop-filter: blur(12px);\n                    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n                    line-height: 1.4;\n                    background: linear-gradient(135deg, rgba(59, 130, 246, 0.15), rgba(99, 102, 241, 0.15));\n                    color: rgb(59, 130, 246);\n                    border: 2px solid rgba(59, 130, 246, 0.4);\n                    animation: persistentPulse 2s ease-in-out infinite;\n                    user-select: none;\n                    pointer-events: none;\n                    min-width: 250px;\n                    text-align: center;\n                `;\n                \n                // Add CSS animations if not exists\n                if (!document.getElementById('persistent-toast-styles')) {\n                    const styles = document.createElement('style');\n                    styles.id = 'persistent-toast-styles';\n                    styles.textContent = `\n                        @keyframes persistentPulse {\n                            0%, 100% { \n                                transform: translateX(-50%) scale(1);\n                                box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25), 0 0 0 0 rgba(59, 130, 246, 0.4);\n                            }\n                            50% { \n                                transform: translateX(-50%) scale(1.02);\n                                box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25), 0 0 0 8px rgba(59, 130, 246, 0);\n                            }\n                        }\n                        \n                        .toast-content {\n                            display: flex;\n                            align-items: center;\n                            justify-content: center;\n                            gap: 8px;\n                        }\n                        \n                        .pulse-indicator {\n                            width: 8px;\n                            height: 8px;\n                            border-radius: 50%;\n                            background: rgb(59, 130, 246);\n                            animation: indicatorPulse 1.5s ease-in-out infinite;\n                            flex-shrink: 0;\n                        }\n                        \n                        @keyframes indicatorPulse {\n                            0%, 100% { opacity: 1; transform: scale(1); }\n                            50% { opacity: 0.5; transform: scale(1.2); }\n                        }\n                    `;\n                    document.head.appendChild(styles);\n                }\n                \n                document.body.appendChild(toast);\n                state.persistentToast = toast;\n                console.log('🔍 Persistent toast shown for', scanCount, 'scans');\n            },\n            \n            hideToast: () => {\n                if (state.persistentToast) {\n                    state.persistentToast.style.animation = 'none';\n                    state.persistentToast.style.transform = 'translateX(-50%) scale(0.95)';\n                    state.persistentToast.style.opacity = '0';\n                    setTimeout(() => {\n                        if (state.persistentToast) {\n                            state.persistentToast.remove();\n                            state.persistentToast = null;\n                        }\n                    }, 200);\n                    console.log('🔍 Persistent toast hidden');\n                }\n            },\n            \n            markRowsAsScanning: (scanIds) => {\n                scanIds.forEach(id => {\n                    const row = tableBody.querySelector(`tr[data-id=\"${id}\"]`);\n                    if (row) {\n                        // Update status to show \"Scanning...\" \n                        const statusCell = row.querySelector('[data-label=\"Status\"] .status-badge');\n                        if (statusCell) {\n                            statusCell.textContent = 'Scanning...';\n                            statusCell.className = 'status-badge status-info';\n                        }\n                        \n                        // Show scanning message in summary\n                        const summaryCell = row.querySelector('[data-label=\"Summary\"] p');\n                        if (summaryCell) {\n                            summaryCell.textContent = 'Scan in progress... Please wait for results.';\n                            summaryCell.style.fontStyle = 'italic';\n                            summaryCell.style.opacity = '0.7';\n                        }\n                        \n                        // Show analyzing in tags\n                        const tagsContainer = row.querySelector('[data-label=\"Tags\"] .tags-container');\n                        if (tagsContainer) {\n                            tagsContainer.innerHTML = '<span style=\"opacity: 0.6; font-style: italic;\">Analyzing...</span>';\n                        }\n                        \n                        // Disable checkbox and add visual indicator for items being scanned\n                        const checkbox = row.querySelector('.row-selector');\n                        if (checkbox) {\n                            checkbox.disabled = true;\n                            checkbox.checked = false;\n                            checkbox.title = 'Cannot select: scan in progress';\n                            // Add visual styling to show disabled state\n                            checkbox.style.opacity = '0.5';\n                            checkbox.style.cursor = 'not-allowed';\n                        }\n                        \n                        // DON'T update Last Scan time during scan start\n                        // Last Scan time should only be updated when scan actually completes\n                        // and we receive the real timestamp from the database\n                        \n                        console.log('🔍 Marked row as scanning:', id);\n                    }\n                });\n            },\n            \n            updateRowWithResults: (row, scanData) => {\n                try {\n                    const recordId = row.getAttribute('data-id');\n                    console.log('🔍 Updating row with scan results:', recordId);\n                    \n                    // Update status badge\n                    const statusCell = row.querySelector('[data-label=\"Status\"] .status-badge');\n                    if (statusCell && scanData.status_code) {\n                        const statusCodeStr = String(scanData.status_code);\n                        statusCell.textContent = statusCodeStr;\n                        \n                        // Apply correct status class\n                        let statusClass = 'info';\n                        if (statusCodeStr.startsWith('2')) statusClass = 'success';\n                        else if (statusCodeStr.startsWith('4') || statusCodeStr.startsWith('5')) statusClass = 'error';\n                        else if (statusCodeStr.startsWith('3')) statusClass = 'redirect';\n                        else if (statusCodeStr.includes('ECONNREFUSED') || \n                                 statusCodeStr.includes('ENOTFOUND') || \n                                 statusCodeStr.includes('EAI_AGAIN') ||\n                                 statusCodeStr.includes('EAIAGAIN') ||\n                                 statusCodeStr.includes('ENETUNREACH') ||\n                                 statusCodeStr.includes('ETIMEDOUT') ||\n                                 statusCodeStr.includes('ECONNRESET') ||\n                                 statusCodeStr.includes('ECONNABORTED')) statusClass = 'dns-error';\n                        \n                        statusCell.className = `status-badge status-${statusClass}`;\n                    }\n                    \n                    // Update summary\n                    const summaryCell = row.querySelector('[data-label=\"Summary\"] p');\n                    if (summaryCell && scanData.agent_summary) {\n                        summaryCell.textContent = scanData.agent_summary;\n                        summaryCell.style.fontStyle = 'normal';\n                        summaryCell.style.opacity = '1';\n                    }\n                    \n                    // Update tags\n                    const tagsContainer = row.querySelector('[data-label=\"Tags\"] .tags-container');\n                    if (tagsContainer && scanData.page_assessment && Array.isArray(scanData.page_assessment)) {\n                        const hashString = (str) => {\n                            let hash = 0;\n                            for (let i = 0; i < str.length; i++) {\n                                const char = str.charCodeAt(i);\n                                hash = ((hash << 5) - hash) + char;\n                                hash = hash & hash;\n                            }\n                            return Math.abs(hash) % 360;\n                        };\n                        \n                        const tagBadges = scanData.page_assessment.map(tag => {\n                            const cssClass = tag.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, '');\n                            const displayText = tag.replace(/-/g, ' ').toUpperCase();\n                            const colorHash = hashString(tag.toLowerCase());\n                            return `<span class=\"tag-badge tag-${cssClass}\" style=\"--tag-hash: ${colorHash}\">${displayText}</span>`;\n                        }).join('');\n                        \n                        tagsContainer.innerHTML = tagBadges;\n                    } else if (tagsContainer) {\n                        tagsContainer.innerHTML = '';\n                    }\n                    \n                    // Update screenshot\n                    const screenshotCell = row.querySelector('[data-label=\"Screenshot\"]');\n                    if (screenshotCell && scanData.screenshot_url) {\n                        screenshotCell.innerHTML = `<img src=\"${scanData.screenshot_url}\" alt=\"Thumbnail for ${scanData.domain || 'website'}\" class=\"screenshot-thumbnail\" data-full-src=\"${scanData.screenshot_url}\">`;\n                    }\n                    \n                    // Update Last Scan time\n                    const lastScanCell = row.querySelector('[data-label=\"Last Scan\"]');\n                    if (lastScanCell && scanData.last_scan_time) {\n                        const date = new Date(scanData.last_scan_time);\n                        const dateOnly = date.toLocaleDateString('en-US', { \n                            year: 'numeric', \n                            month: 'short', \n                            day: 'numeric'\n                        });\n                        const timeOnly = date.toLocaleTimeString('en-US', { \n                            hour: '2-digit',\n                            minute: '2-digit',\n                            hour12: true\n                        });\n                        lastScanCell.innerHTML = `<div class=\"date-time-container\"><div class=\"date-line\">${dateOnly}</div><div class=\"time-line\">${timeOnly}</div></div>`;\n                    }\n                    \n                    // Re-enable checkbox when scan completes\n                    const checkbox = row.querySelector('.row-selector');\n                    if (checkbox) {\n                        checkbox.disabled = false;\n                        checkbox.title = '';\n                        checkbox.style.opacity = '1';\n                        checkbox.style.cursor = 'pointer';\n                    }\n                    \n                    console.log('🔍 Row updated successfully:', recordId);\n                } catch (error) {\n                    console.error('🔍 Error updating row:', error);\n                }\n            },\n            \n            isScanActive: (id) => {\n                return state.activeScanIds.has(id);\n            }\n        };\n\n        if (!tableBody) return; // Guard clause\n\n        // Initialize Supabase real-time connection\n        const initSupabaseRealtime = () => {\n            try {\n                const SUPABASE_URL = 'http://host.docker.internal:8000';\n                const SUPABASE_ANON_KEY = '{{ $env.SUPABASE_ANON_KEY }}';\n                \n                if (typeof supabase === 'undefined') {\n                    console.warn('Supabase not loaded, WebSocket disabled');\n                    return null;\n                }\n                \n                const { createClient } = supabase;\n                state.supabaseClient = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);\n                \n                // Subscribe to real-time changes\n                state.realTimeSubscription = state.supabaseClient\n                    .channel('url_scan_changes')\n                    .on('postgres_changes', { \n                        event: '*', \n                        schema: 'public', \n                        table: 'url_scan' \n                    }, (payload) => {\n                        console.log('🔍 WebSocket payload:', payload);\n                        handleRealtimeUpdate(payload);\n                    })\n                    .subscribe((status) => {\n                        console.log('🔍 WebSocket status:', status);\n                    });\n                \n                console.log('🔍 Supabase WebSocket initialized');\n                return state.supabaseClient;\n            } catch (error) {\n                console.warn('🔍 Supabase WebSocket failed:', error);\n                return null;\n            }\n        };\n\n        // Handle real-time database updates\n        const handleRealtimeUpdate = (payload) => {\n            try {\n                if (payload.eventType === 'DELETE') {\n                    const row = document.querySelector(`tr[data-id=\"${payload.old.id}\"]`);\n                    if (row) {\n                        row.remove();\n                        state.originalRows = state.originalRows.filter(r => r !== row);\n                        showToast('Record deleted', 'info');\n                        \n                        // Update pagination\n                        const handleFilterChange = () => {\n                            const newFilteredRows = getFilteredRows();\n                            if (window.pagination) {\n                                window.pagination.updateRows(newFilteredRows);\n                            }\n                        };\n                        handleFilterChange();\n                    }\n                } else if (payload.eventType === 'UPDATE') {\n                    const row = document.querySelector(`tr[data-id=\"${payload.new.id}\"]`);\n                    if (row) {\n                        scanStateManager.updateRowWithResults(row, payload.new);\n                        showToast('Scan completed!', 'success');\n                        \n                        // Remove from active scans when complete\n                        setTimeout(() => {\n                            scanStateManager.finishScanning([payload.new.id]);\n                        }, 3000);\n                    }\n                } else if (payload.eventType === 'INSERT') {\n                    showToast('New record added', 'info');\n                }\n            } catch (error) {\n                console.error('🔍 WebSocket update error:', error);\n            }\n        };\n\n        // Polling fallback for scan completion\n        let scanPollingInterval = null;\n        \n        const startScanPolling = (scanIds) => {\n            if (!state.supabaseClient || scanIds.length === 0) return;\n            \n            console.log('🔍 Starting scan polling for:', scanIds);\n            \n            if (scanPollingInterval) {\n                clearInterval(scanPollingInterval);\n            }\n            \n            let attempts = 0;\n            const maxAttempts = 60;\n            \n            scanPollingInterval = setInterval(async () => {\n                attempts++;\n                console.log(`🔍 Polling attempt ${attempts}/${maxAttempts}`);\n                \n                try {\n                    const { data, error } = await state.supabaseClient\n                        .from('url_scan')\n                        .select('*')\n                        .in('id', scanIds)\n                        .eq('scan_status', true)\n                        .not('agent_summary', 'is', null);\n                    \n                    if (error) {\n                        console.error('🔍 Polling error:', error);\n                        return;\n                    }\n                    \n                    if (data && data.length > 0) {\n                        console.log('🔍 Found completed scans:', data.map(d => d.id));\n                        \n                        data.forEach(scanResult => {\n                            const row = document.querySelector(`tr[data-id=\"${scanResult.id}\"]`);\n                            if (row) {\n                                scanStateManager.updateRowWithResults(row, scanResult);\n                                showToast(`Scan completed: ${scanResult.domain || 'URL'}`, 'success');\n                            }\n                        });\n                        \n                        // Remove completed IDs from polling and cache\n                        const completedIds = data.map(item => item.id);\n                        scanIds = scanIds.filter(id => !completedIds.includes(id));\n                        \n                        // Remove completed scans from active list\n                        setTimeout(() => {\n                            scanStateManager.finishScanning(completedIds);\n                        }, 3000);\n                        \n                        if (scanIds.length === 0) {\n                            clearInterval(scanPollingInterval);\n                            scanPollingInterval = null;\n                            console.log('🔍 All scans completed');\n                        }\n                    }\n                    \n                    if (attempts >= maxAttempts) {\n                        clearInterval(scanPollingInterval);\n                        scanPollingInterval = null;\n                        console.log('🔍 Polling timeout');\n                    }\n                } catch (error) {\n                    console.error('🔍 Polling error:', error);\n                }\n            }, 10000);\n        };\n\n        // ==========================================================================\n        // Core Logic Functions\n        // ==========================================================================\n\n        // Smart dropdown positioning system\n        const positionDropdown = (button, dropdown) => {\n            if (!button || !dropdown) return;\n\n            // Get button and viewport dimensions\n            const buttonRect = button.getBoundingClientRect();\n            const dropdownRect = dropdown.getBoundingClientRect();\n            const viewportWidth = window.innerWidth;\n            const viewportHeight = window.innerHeight;\n            \n            // Reset any previous positioning\n            dropdown.style.left = '';\n            dropdown.style.right = '';\n            dropdown.style.top = '';\n            dropdown.style.bottom = '';\n            dropdown.style.transform = '';\n            \n            // Calculate available space\n            const spaceRight = viewportWidth - buttonRect.right;\n            const spaceLeft = buttonRect.left;\n            const spaceBelow = viewportHeight - buttonRect.bottom;\n            const spaceAbove = buttonRect.top;\n            \n            // Determine horizontal positioning\n            if (spaceRight >= dropdownRect.width) {\n                // Align to the left edge of button (default)\n                dropdown.style.left = '0';\n            } else if (spaceLeft >= dropdownRect.width) {\n                // Align to the right edge of button\n                dropdown.style.right = '0';\n            } else {\n                // Center align if neither side has enough space\n                const offset = (dropdownRect.width - buttonRect.width) / 2;\n                dropdown.style.left = `-${offset}px`;\n            }\n            \n            // Determine vertical positioning\n            if (spaceBelow >= dropdownRect.height) {\n                // Position below button (default)\n                dropdown.style.top = '100%';\n            } else if (spaceAbove >= dropdownRect.height) {\n                // Position above button\n                dropdown.style.bottom = '100%';\n            } else {\n                // Position below but adjust if needed\n                dropdown.style.top = '100%';\n            }\n            \n            console.log('📍 Positioned dropdown:', {\n                button: buttonRect,\n                dropdown: dropdownRect,\n                viewport: { width: viewportWidth, height: viewportHeight },\n                spaces: { left: spaceLeft, right: spaceRight, above: spaceAbove, below: spaceBelow }\n            });\n        };\n\n        const showToast = (message, type = 'info') => {\n            const existingToasts = document.querySelectorAll('.toast-notification');\n            existingToasts.forEach(toast => toast.remove());\n            \n            const toast = document.createElement('div');\n            toast.className = `toast-notification toast-${type}`;\n            toast.textContent = message;\n            \n            toast.style.cssText = `\n                position: fixed;\n                top: 20px;\n                right: 20px;\n                padding: var(--space-4) var(--space-5);\n                border-radius: var(--radius);\n                font-weight: 500;\n                font-size: var(--text-sm);\n                z-index: 10000;\n                box-shadow: var(--shadow-xl);\n                transform: translateX(100%);\n                transition: all var(--transition-normal);\n                max-width: 350px;\n                word-wrap: break-word;\n                border: 1px solid;\n                backdrop-filter: blur(8px);\n                font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n                line-height: 1.4;\n                cursor: pointer;\n            `;\n            \n            const colorSchemes = {\n                success: { background: 'var(--success-bg)', color: 'var(--success)', borderColor: 'var(--success-border)' },\n                error: { background: 'var(--error-bg)', color: 'var(--error)', borderColor: 'var(--error-border)' },\n                info: { background: 'var(--info-bg)', color: 'var(--info)', borderColor: 'var(--info-border)' },\n                warning: { background: 'var(--warning-bg)', color: 'var(--warning)', borderColor: 'var(--warning-border)' }\n            };\n            \n            const scheme = colorSchemes[type] || colorSchemes.info;\n            toast.style.background = scheme.background;\n            toast.style.color = scheme.color;\n            toast.style.borderColor = scheme.borderColor;\n            \n            document.body.appendChild(toast);\n            \n            setTimeout(() => { toast.style.transform = 'translateX(0)'; }, 10);\n            setTimeout(() => {\n                toast.style.transform = 'translateX(100%)';\n                setTimeout(() => toast.remove(), 300);\n            }, 5000);\n            \n            toast.addEventListener('click', () => {\n                toast.style.transform = 'translateX(100%)';\n                setTimeout(() => toast.remove(), 300);\n            });\n        };\n\n        const getFilteredRows = () => {\n            const textFilter = textFilterInput.value.toLowerCase();\n            const selectedStatusFilters = Array.from(statusFilterCheckboxes)\n                .filter(cb => cb.checked)\n                .map(cb => cb.value);\n\n            return state.originalRows.filter(row => {\n                const rowText = row.textContent.toLowerCase();\n                const rowStatus = row.querySelector('.status-badge')?.textContent.toLowerCase() || '';\n                \n                const textMatch = !textFilter || rowText.includes(textFilter);\n                \n                const statusMatch = selectedStatusFilters.length === 0 || selectedStatusFilters.some(status => {\n                    if (status === 'dns-error') {\n                        return rowStatus.includes('econnrefused') || \n                               rowStatus.includes('enotfound') || \n                               rowStatus.includes('eai_again') ||\n                               rowStatus.includes('eaiagain') ||\n                               rowStatus.includes('enetunreach') ||\n                               rowStatus.includes('etimedout') ||\n                               rowStatus.includes('econnreset') ||\n                               rowStatus.includes('econnaborted') ||\n                               rowStatus.includes('dns') ||\n                               rowStatus.includes('connection');\n                    }\n                    if (status === '4xx') {\n                        const statusCode = rowStatus.trim();\n                        return /^4\\d{2}$/.test(statusCode);\n                    }\n                    if (status === '5xx') {\n                        const statusCode = rowStatus.trim();\n                        return /^5\\d{2}$/.test(statusCode);\n                    }\n                    if (status === 'scanning') {\n                        return rowStatus.includes('scanning');\n                    }\n                    return rowStatus.includes(status.toLowerCase());\n                });\n                \n                return textMatch && statusMatch;\n            });\n        };\n\n        const updateSelectAllCheckbox = () => {\n            const visibleCheckboxes = tableBody.querySelectorAll('tr[style*=\"display: table-row\"] .row-selector:not(:disabled)');\n            const checkedVisible = tableBody.querySelectorAll('tr[style*=\"display: table-row\"] .row-selector:checked:not(:disabled)');\n\n            if (visibleCheckboxes.length === 0) {\n                selectAllCheckbox.checked = false;\n                selectAllCheckbox.indeterminate = false;\n            } else if (checkedVisible.length === visibleCheckboxes.length) {\n                selectAllCheckbox.checked = true;\n                selectAllCheckbox.indeterminate = false;\n            } else if (checkedVisible.length > 0) {\n                selectAllCheckbox.checked = false;\n                selectAllCheckbox.indeterminate = true;\n            } else {\n                selectAllCheckbox.checked = false;\n                selectAllCheckbox.indeterminate = false;\n            }\n        };\n\n        const sortTable = (sortType) => {\n            const rowsToSort = Array.from(tableBody.querySelectorAll('tr'));\n            \n            const getCellValue = {\n              'url': row => row.querySelector('[data-label=\"URL\"] a')?.title.toLowerCase() || '',\n              'status': row => row.querySelector('[data-label=\"Status\"] .status-badge')?.textContent || '',\n              'summary': row => {\n                  const summaryText = row.querySelector('[data-label=\"Summary\"] p')?.textContent.trim() || '';\n                  return summaryText !== '';\n              },\n              'screenshot': row => row.querySelector('[data-label=\"Screenshot\"] .screenshot-thumbnail') !== null,\n              'created_at': row => {\n                  const dateCell = row.querySelector('[data-label=\"Created Date\"]');\n                  if (!dateCell) return new Date(0);\n                  const dateLine = dateCell.querySelector('.date-line')?.textContent.trim() || '';\n                  const timeLine = dateCell.querySelector('.time-line')?.textContent.trim() || '';\n                  if (dateLine === '' || timeLine === '') return new Date(0);\n                  \n                  try {\n                      const tempDate = new Date(dateLine + ' ' + timeLine);\n                      if (isNaN(tempDate.getTime())) {\n                          const dateObj = new Date(dateLine);\n                          const timeMatch = timeLine.match(/(\\d{1,2}):(\\d{2})\\s*(AM|PM)/i);\n                          if (timeMatch) {\n                              let hours = parseInt(timeMatch[1]);\n                              const minutes = parseInt(timeMatch[2]);\n                              const isPM = timeMatch[3].toUpperCase() === 'PM';\n                              \n                              if (isPM && hours !== 12) hours += 12;\n                              if (!isPM && hours === 12) hours = 0;\n                              \n                              dateObj.setHours(hours, minutes, 0, 0);\n                              return dateObj;\n                          }\n                          return new Date(0);\n                      }\n                      return tempDate;\n                  } catch (e) {\n                      console.error('Date parsing error:', e, { dateLine, timeLine });\n                      return new Date(0);\n                  }\n              },\n              'last_scan_time': row => {\n                  const dateCell = row.querySelector('[data-label=\"Last Scan\"]');\n                  if (!dateCell) return new Date(0);\n                  const dateLine = dateCell.querySelector('.date-line')?.textContent.trim() || '';\n                  const timeLine = dateCell.querySelector('.time-line')?.textContent.trim() || '';\n                  if (dateLine === '' || timeLine === '') return new Date(0);\n                  \n                  try {\n                      const tempDate = new Date(dateLine + ' ' + timeLine);\n                      if (isNaN(tempDate.getTime())) {\n                          const dateObj = new Date(dateLine);\n                          const timeMatch = timeLine.match(/(\\d{1,2}):(\\d{2})\\s*(AM|PM)/i);\n                          if (timeMatch) {\n                              let hours = parseInt(timeMatch[1]);\n                              const minutes = parseInt(timeMatch[2]);\n                              const isPM = timeMatch[3].toUpperCase() === 'PM';\n                              \n                              if (isPM && hours !== 12) hours += 12;\n                              if (!isPM && hours === 12) hours = 0;\n                              \n                              dateObj.setHours(hours, minutes, 0, 0);\n                              return dateObj;\n                          }\n                          return new Date(0);\n                      }\n                      return tempDate;\n                  } catch (e) {\n                      console.error('Date parsing error:', e, { dateLine, timeLine });\n                      return new Date(0);\n                  }\n              }\n            };\n\n            rowsToSort.sort((a, b) => {\n              const valA = getCellValue[sortType](a);\n              const valB = getCellValue[sortType](b);\n              \n              if (typeof valA === 'boolean') return valA === valB ? 0 : valA ? -1 : 1;\n              if (valA instanceof Date && valB instanceof Date) {\n                  return valB.getTime() - valA.getTime();\n              }\n              return valA.localeCompare(valB, undefined, { numeric: true });\n            });\n\n            rowsToSort.forEach(row => tableBody.appendChild(row));\n        };\n        \n        // ==========================================================================\n        // Pagination Manager Class\n        // ==========================================================================\n        class PaginationManager {\n            constructor() {\n                this.currentPage = 1;\n                this.itemsPerPage = 50;\n                this.rows = [];\n                this.initializeElements();\n            }\n\n            initializeElements() {\n                this.itemsPerPageSelect = document.getElementById('items-per-page');\n                this.paginationText = document.getElementById('pagination-text');\n                this.pageNumbers = document.getElementById('page-numbers');\n                this.firstPageBtn = document.getElementById('first-page');\n                this.prevPageBtn = document.getElementById('prev-page');\n                this.nextPageBtn = document.getElementById('next-page');\n                this.lastPageBtn = document.getElementById('last-page');\n            }\n\n            bindEvents() {\n                this.itemsPerPageSelect.addEventListener('change', (e) => {\n                    this.itemsPerPage = e.target.value === 'all' ? Number.POSITIVE_INFINITY : Number.parseInt(e.target.value, 10);\n                    this.goToPage(1);\n                });\n                this.firstPageBtn.addEventListener('click', () => this.goToPage(1));\n                this.prevPageBtn.addEventListener('click', () => this.goToPage(this.currentPage - 1));\n                this.nextPageBtn.addEventListener('click', () => this.goToPage(this.currentPage + 1));\n                this.lastPageBtn.addEventListener('click', () => this.goToPage(this.getTotalPages()));\n            }\n\n            updateRows(newRows) {\n                this.rows = newRows;\n                this.goToPage(1);\n            }\n\n            goToPage(page) {\n                const totalPages = this.getTotalPages();\n                this.currentPage = Math.max(1, Math.min(page, totalPages || 1));\n                this.render();\n            }\n\n            getTotalPages() {\n                if (this.itemsPerPage === Number.POSITIVE_INFINITY) return 1;\n                return Math.ceil(this.rows.length / this.itemsPerPage);\n            }\n\n            render() {\n                state.originalRows.forEach(row => row.style.display = 'none');\n                \n                const totalItems = this.rows.length;\n                this.toggleNoResults(totalItems === 0);\n\n                if (totalItems > 0) {\n                    const startIndex = (this.currentPage - 1) * this.itemsPerPage;\n                    const endIndex = this.itemsPerPage === Number.POSITIVE_INFINITY ? totalItems : startIndex + this.itemsPerPage;\n                    \n                    this.rows.slice(startIndex, endIndex).forEach(row => {\n                        row.style.display = 'table-row';\n                    });\n                }\n                \n                this.updatePaginationControls();\n                this.updatePaginationText();\n                updateSelectAllCheckbox();\n            }\n\n            toggleNoResults(show) {\n                noResultsMessage.style.display = show ? 'block' : 'none';\n                paginationSection.style.display = show ? 'none' : 'flex';\n            }\n\n            updatePaginationControls() {\n                const totalPages = this.getTotalPages();\n                this.firstPageBtn.disabled = this.currentPage === 1;\n                this.prevPageBtn.disabled = this.currentPage === 1;\n                this.nextPageBtn.disabled = this.currentPage === totalPages;\n                this.lastPageBtn.disabled = this.currentPage === totalPages;\n                this.renderPageNumbers(totalPages);\n            }\n\n            renderPageNumbers(totalPages) {\n                this.pageNumbers.innerHTML = '';\n                if (totalPages <= 1) return;\n                const maxVisiblePages = 5;\n                let startPage = Math.max(1, this.currentPage - Math.floor(maxVisiblePages / 2));\n                const endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);\n                if (endPage - startPage + 1 < maxVisiblePages) {\n                    startPage = Math.max(1, endPage - maxVisiblePages + 1);\n                }\n                for (let i = startPage; i <= endPage; i++) {\n                    const pageBtn = document.createElement('button');\n                    pageBtn.className = `page-number ${i === this.currentPage ? 'active' : ''}`;\n                    pageBtn.textContent = i;\n                    pageBtn.addEventListener('click', () => this.goToPage(i));\n                    this.pageNumbers.appendChild(pageBtn);\n                }\n            }\n            \n            updatePaginationText() {\n                const totalItems = this.rows.length;\n                if (totalItems === 0) return;\n\n                if (this.itemsPerPage === Number.POSITIVE_INFINITY) {\n                    this.paginationText.textContent = `Showing all ${totalItems} results`;\n                    return;\n                }\n                const startItem = (this.currentPage - 1) * this.itemsPerPage + 1;\n                const endItem = Math.min(this.currentPage * this.itemsPerPage, totalItems);\n                this.paginationText.textContent = `Showing ${startItem}-${endItem} of ${totalItems} results`;\n            }\n        }\n        \n        // ==========================================================================\n        // Event Binding\n        // ==========================================================================\n        const bindEvents = (pagination) => {\n            const handleFilterChange = () => {\n                const newFilteredRows = getFilteredRows();\n                pagination.updateRows(newFilteredRows);\n            };\n\n            // Sorting\n            applySortBtn.addEventListener('click', () => {\n                sortTable(document.querySelector('input[name=\"sort-option\"]:checked')?.value);\n                pagination.render(); \n                sortDropdown.style.display = 'none';\n            });\n\n            clearSortBtn.addEventListener('click', () => {\n                const selectedSort = document.querySelector('input[name=\"sort-option\"]:checked');\n                if (selectedSort) selectedSort.checked = false;\n                handleFilterChange();\n                sortDropdown.style.display = 'none';\n            });\n            \n            // Filtering\n            applyFiltersBtn.addEventListener('click', () => {\n                handleFilterChange();\n                filterDropdown.style.display = 'none';\n            });\n            \n            clearFiltersBtn.addEventListener('click', () => {\n                statusFilterCheckboxes.forEach(cb => cb.checked = false);\n                handleFilterChange();\n            });\n\n            textFilterInput.addEventListener('input', handleFilterChange);\n\n            // Dropdowns\n            filterButton.addEventListener('click', (e) => { \n                e.stopPropagation(); \n                sortDropdown.style.display = 'none'; \n                exportDropdown.style.display = 'none';\n                const isVisible = filterDropdown.style.display === 'block';\n                filterDropdown.style.display = isVisible ? 'none' : 'block';\n                if (!isVisible) {\n                    positionDropdown(filterButton, filterDropdown);\n                }\n            });\n            \n            sortButton.addEventListener('click', (e) => { \n                e.stopPropagation(); \n                filterDropdown.style.display = 'none'; \n                exportDropdown.style.display = 'none';\n                const isVisible = sortDropdown.style.display === 'block';\n                sortDropdown.style.display = isVisible ? 'none' : 'block';\n                if (!isVisible) {\n                    positionDropdown(sortButton, sortDropdown);\n                }\n            });\n\n            exportButton.addEventListener('click', (e) => { \n                e.stopPropagation(); \n                filterDropdown.style.display = 'none'; \n                sortDropdown.style.display = 'none';\n                const isVisible = exportDropdown.style.display === 'block';\n                exportDropdown.style.display = isVisible ? 'none' : 'block';\n                if (!isVisible) {\n                    positionDropdown(exportButton, exportDropdown);\n                }\n            });\n\n            window.addEventListener('click', () => { \n                filterDropdown.style.display = 'none'; \n                sortDropdown.style.display = 'none'; \n                exportDropdown.style.display = 'none';\n            });\n            \n            filterDropdown.addEventListener('click', e => e.stopPropagation());\n            sortDropdown.addEventListener('click', e => e.stopPropagation());\n            exportDropdown.addEventListener('click', e => e.stopPropagation());\n\n            // Modal\n            tableBody.addEventListener('click', (e) => {\n                if (e.target.classList.contains('screenshot-thumbnail')) {\n                    modalImage.src = e.target.dataset.fullSrc || e.target.src;\n                    modal.classList.add('active');\n                }\n            });\n            \n            modal.addEventListener('click', (e) => {\n                if (e.target === modal || e.target.classList.contains('modal-backdrop')) {\n                    modal.classList.remove('active');\n                }\n            });\n\n            // Row Selection\n            selectAllCheckbox.addEventListener('change', () => {\n                const visibleCheckboxes = tableBody.querySelectorAll('tr[style*=\"display: table-row\"] .row-selector:not(:disabled)');\n                visibleCheckboxes.forEach(checkbox => checkbox.checked = selectAllCheckbox.checked);\n            });\n            \n            tableBody.addEventListener('change', (e) => { \n                if (e.target.classList.contains('row-selector')) updateSelectAllCheckbox(); \n            });\n            \n            // Delete\n            deleteButton.addEventListener('click', async () => {\n                const selectedCheckboxes = Array.from(tableBody.querySelectorAll('.row-selector:checked'));\n                if (selectedCheckboxes.length === 0) {\n                    showToast('Please select at least one row to delete.', 'error');\n                    return;\n                }\n                \n                // Check if any selected items are currently being scanned\n                const selectedIds = selectedCheckboxes.map(cb => cb.value);\n                const itemsBeingScanned = selectedIds.filter(id => scanStateManager.isScanActive(id));\n                \n                if (itemsBeingScanned.length > 0) {\n                    showToast(`Cannot delete ${itemsBeingScanned.length} item(s) that are currently being scanned. Please wait for scans to complete.`, 'error');\n                    return;\n                }\n                \n                if (!confirm(`Are you sure you want to delete ${selectedCheckboxes.length} item(s)?`)) return;\n\n                const selectedData = selectedCheckboxes.map(cb => ({ id: cb.value }));\n                \n                deleteButton.disabled = true;\n                deleteButton.textContent = 'Deleting...';\n                showToast('Deletion in progress...', 'info');\n                \n                try {\n                    const response = await fetch('/webhook/delete', { \n                        method: 'DELETE', \n                        headers: { 'Content-Type': 'application/json' }, \n                        body: JSON.stringify({ \n                            items: selectedData,\n                            count: selectedData.length,\n                            timestamp: new Date().toISOString()\n                        }) \n                    });\n                    \n                    if (!response.ok) {\n                        throw new Error(`Server error: ${response.status} ${response.statusText}`);\n                    }\n                    \n                    let result;\n                    const contentType = response.headers.get('content-type');\n                    if (contentType && contentType.includes('application/json')) {\n                        const responseText = await response.text();\n                        if (responseText.trim()) {\n                            result = JSON.parse(responseText);\n                        } else {\n                            result = { success: true };\n                        }\n                    } else {\n                        result = { success: true };\n                    }\n                    \n                    if (result.success) {\n                        selectAllCheckbox.checked = false;\n                        selectAllCheckbox.indeterminate = false;\n                        \n                        selectedCheckboxes.forEach(checkbox => {\n                            const row = checkbox.closest('tr');\n                            if (row) {\n                                row.remove();\n                                state.originalRows = state.originalRows.filter(r => r !== row);\n                            }\n                        });\n                        \n                        handleFilterChange();\n                        showToast(`Successfully deleted ${selectedData.length} item(s)!`, 'success');\n                    } else {\n                        throw new Error(result.message || 'Deletion failed');\n                    }\n                    \n                } catch (error) {\n                    console.error('Delete operation failed:', error);\n                    showToast(`Deletion failed: ${error.message}`, 'error');\n                } finally {\n                    deleteButton.disabled = false;\n                    deleteButton.textContent = 'Delete Selected';\n                }\n            });\n\n            // Start Scan - COMPLETELY REWRITTEN\n            scanButton.addEventListener('click', async () => {\n                const selectedCheckboxes = Array.from(tableBody.querySelectorAll('.row-selector:checked'));\n                if (selectedCheckboxes.length === 0) {\n                    showToast('Please select at least one URL to scan.', 'error');\n                    return;\n                }\n                \n                const selectedIds = selectedCheckboxes.map(cb => cb.value);\n                const alreadyScanning = selectedIds.filter(id => scanStateManager.isScanActive(id));\n                \n                if (alreadyScanning.length > 0) {\n                    showToast(`${alreadyScanning.length} URL(s) are already being scanned.`, 'warning');\n                    return;\n                }\n                \n                if (selectedCheckboxes.length > 50) {\n                    showToast('Maximum 50 URLs per batch allowed.', 'warning');\n                    return;\n                }\n                \n                if (!confirm(`Are you sure you want to start scanning ${selectedCheckboxes.length} URL(s)?`)) return;\n\n                const selectedData = selectedCheckboxes.map(cb => {\n                    const row = cb.closest('tr');\n                    const url = row.querySelector('[data-label=\"URL\"] a')?.href || '';\n                    return {\n                        id: cb.value,\n                        url: url,\n                        scan_type: 'playwright'\n                    };\n                });\n                \n                // STEP 1: IMMEDIATELY start scanning and update UI\n                scanStateManager.startScanning(selectedIds);\n                \n                selectAllCheckbox.checked = false;\n                selectAllCheckbox.indeterminate = false;\n                \n                scanButton.disabled = true;\n                scanButton.textContent = 'Scan in Progress...';\n                showToast('Scan started! Analysis in progress...', 'info');\n                \n                try {\n                    // STEP 2: Send webhook\n                    const response = await fetch('/webhook/scan', { \n                        method: 'POST', \n                        headers: { 'Content-Type': 'application/json' }, \n                        body: JSON.stringify({ \n                            items: selectedData,\n                            count: selectedData.length,\n                            timestamp: new Date().toISOString(),\n                            action: 'start_scan'\n                        }) \n                    });\n                    \n                    if (!response.ok) {\n                        throw new Error(`Server error: ${response.status} ${response.statusText}`);\n                    }\n                    \n                    let result;\n                    const contentType = response.headers.get('content-type');\n                    if (contentType && contentType.includes('application/json')) {\n                        const responseText = await response.text();\n                        if (responseText.trim()) {\n                            result = JSON.parse(responseText);\n                        } else {\n                            result = { success: true };\n                        }\n                    } else {\n                        result = { success: true };\n                    }\n                    \n                    if (result.success) {\n                        // Start polling for completion\n                        if (state.supabaseClient) {\n                            startScanPolling(selectedIds);\n                        }\n                    } else {\n                        throw new Error(result.message || 'Scan initialization failed');\n                    }\n                    \n                } catch (error) {\n                    console.error('🔍 Scan failed:', error);\n                    \n                    // STEP 3: If webhook fails, revert changes\n                    scanStateManager.finishScanning(selectedIds);\n                    \n                    selectedCheckboxes.forEach(checkbox => {\n                        const row = checkbox.closest('tr');\n                        if (row) {\n                            const statusCell = row.querySelector('[data-label=\"Status\"] .status-badge');\n                            if (statusCell) {\n                                statusCell.textContent = 'Failed';\n                                statusCell.className = 'status-badge status-error';\n                            }\n                            \n                            const summaryCell = row.querySelector('[data-label=\"Summary\"] p');\n                            if (summaryCell) {\n                                summaryCell.textContent = 'Scan failed to start';\n                                summaryCell.style.fontStyle = 'normal';\n                                summaryCell.style.opacity = '1';\n                            }\n                            \n                            const tagsContainer = row.querySelector('[data-label=\"Tags\"] .tags-container');\n                            if (tagsContainer) {\n                                tagsContainer.innerHTML = '';\n                            }\n                        }\n                    });\n                    \n                    showToast(`❌ Scan failed: ${error.message}`, 'error');\n                } finally {\n                    scanButton.disabled = false;\n                    scanButton.textContent = 'Start Scan';\n                }\n            });\n\n            // Upload URLs - Navigate to n8n form\n            uploadButton.addEventListener('click', () => {\n                // Navigate to the n8n webhook form URL\n                const uploadFormUrl = 'http://localhost:5678/form/upload';\n                window.location.href = uploadFormUrl;\n            });\n\n            // Export functions\n            const extractRowData = (row) => {\n                const tagsElement = row.querySelector('[data-label=\"Tags\"] .tags-container');\n                let securityTags = '';\n                if (tagsElement) {\n                    const tagElements = tagsElement.querySelectorAll('.tag-badge');\n                    const tags = Array.from(tagElements).map(tag => tag.textContent.trim()).filter(tag => tag !== '');\n                    securityTags = tags.length > 0 ? tags.join(', ') : '';\n                }\n                \n                const getDateTimeString = (cell) => {\n                    const dateLine = cell.querySelector('.date-line')?.textContent.trim() || '';\n                    const timeLine = cell.querySelector('.time-line')?.textContent.trim() || '';\n                    return dateLine && timeLine ? `${dateLine} ${timeLine}` : '';\n                };\n                \n                const createdDateCell = row.querySelector('[data-label=\"Created Date\"]');\n                const lastScanCell = row.querySelector('[data-label=\"Last Scan\"]');\n                \n                return {\n                    id: row.querySelector('.row-selector')?.value || '',\n                    url: row.querySelector('[data-label=\"URL\"] a')?.href || '',\n                    status: row.querySelector('[data-label=\"Status\"]')?.textContent.trim() || '',\n                    summary: row.querySelector('[data-label=\"Summary\"] p')?.textContent.trim() || '',\n                    securityTags: securityTags,\n                    screenshotUrl: row.querySelector('[data-label=\"Screenshot\"] .screenshot-thumbnail')?.src || '',\n                    createdAt: createdDateCell ? getDateTimeString(createdDateCell) : '',\n                    lastScanTime: lastScanCell ? getDateTimeString(lastScanCell) : '',\n                    sourceFilename: row.querySelector('[data-label=\"Source\"]')?.textContent.trim() || ''\n                };\n            };\n\n            exportCsv.addEventListener('click', () => {\n                const visibleRows = Array.from(tableBody.querySelectorAll('tr[style*=\"display: table-row\"]'));\n                if (visibleRows.length === 0) {\n                    alert('No data to export.');\n                    return;\n                }\n                \n                const data = visibleRows.map(extractRowData);\n                const csv = [\n                    'ID,URL,Status,AI Summary,Security Tags,Created Date,Last Scan Date,Source Filename,Screenshot URL',\n                    ...data.map(row => `\"${row.id}\",\"${row.url}\",\"${row.status}\",\"${row.summary.replace(/\"/g, '\"\"')}\",\"${row.securityTags}\",\"${row.createdAt}\",\"${row.lastScanTime}\",\"${row.sourceFilename}\",\"${row.screenshotUrl}\"`)\n                ].join('\\n');\n\n                const blob = new Blob([csv], { type: 'text/csv' });\n                const url = URL.createObjectURL(blob);\n                const a = document.createElement('a');\n                a.href = url;\n                a.download = `url-scanner-export-${new Date().toISOString().split('T')[0]}.csv`;\n                document.body.appendChild(a);\n                a.click();\n                document.body.removeChild(a);\n                URL.revokeObjectURL(url);\n                exportDropdown.style.display = 'none';\n            });\n\n            exportJson.addEventListener('click', () => {\n                const visibleRows = Array.from(tableBody.querySelectorAll('tr[style*=\"display: table-row\"]'));\n                if (visibleRows.length === 0) {\n                    alert('No data to export.');\n                    return;\n                }\n                \n                const data = visibleRows.map(extractRowData);\n                const json = JSON.stringify(data, null, 2);\n                const blob = new Blob([json], { type: 'application/json' });\n                const url = URL.createObjectURL(blob);\n                const a = document.createElement('a');\n                a.href = url;\n                a.download = `url-scanner-export-${new Date().toISOString().split('T')[0]}.json`;\n                document.body.appendChild(a);\n                a.click();\n                document.body.removeChild(a);\n                URL.revokeObjectURL(url);\n                exportDropdown.style.display = 'none';\n            });\n\n            exportTxt.addEventListener('click', () => {\n                const visibleRows = Array.from(tableBody.querySelectorAll('tr[style*=\"display: table-row\"]'));\n                if (visibleRows.length === 0) {\n                    alert('No data to export.');\n                    return;\n                }\n                \n                const urls = visibleRows.map(row => row.querySelector('[data-label=\"URL\"] a')?.href || '').filter(url => url);\n                const txt = urls.join('\\n');\n                const blob = new Blob([txt], { type: 'text/plain' });\n                const url = URL.createObjectURL(blob);\n                const a = document.createElement('a');\n                a.href = url;\n                a.download = `url-scanner-urls-${new Date().toISOString().split('T')[0]}.txt`;\n                document.body.appendChild(a);\n                a.click();\n                document.body.removeChild(a);\n                URL.revokeObjectURL(url);\n                exportDropdown.style.display = 'none';\n            });\n        };\n\n        // ==========================================================================\n        // Initialization\n        // ==========================================================================\n        const init = async () => {\n            console.log('🔍 Initializing URL Scanner Dashboard...');\n            \n            // Load table rows\n            state.originalRows = Array.from(tableBody.querySelectorAll('tr'));\n            console.log('🔍 Loaded', state.originalRows.length, 'table rows');\n            \n            // Initialize pagination\n            const pagination = new PaginationManager();\n            pagination.bindEvents();\n            pagination.updateRows(state.originalRows);\n            \n            // Bind events\n            bindEvents(pagination);\n            \n            // Initialize WebSocket\n            const supabaseClient = initSupabaseRealtime();\n            if (supabaseClient) {\n                showToast('Real-time updates enabled', 'success');\n            } else {\n                console.log('🔍 Using polling fallback for updates');\n            }\n            \n            // Simple initialization - no complex caching\n            console.log('🎯 Dashboard ready - scan state will be managed in real-time');\n            \n            // Make pagination globally available\n            window.pagination = pagination;\n            \n            // No complex caching - scans are managed in real-time only\n            \n            // Debug functions\n            window.clearActiveScans = () => {\n                console.log('🧪 Clearing active scans...');\n                state.activeScanIds.clear();\n                scanStateManager.updateToast();\n                \n                // Re-enable all checkboxes\n                const disabledCheckboxes = tableBody.querySelectorAll('.row-selector:disabled');\n                disabledCheckboxes.forEach(checkbox => {\n                    checkbox.disabled = false;\n                    checkbox.title = '';\n                    checkbox.style.opacity = '1';\n                    checkbox.style.cursor = 'pointer';\n                });\n            };\n            \n            window.inspectScans = () => {\n                console.log('🧪 Active scan inspection:');\n                console.log('Active scan IDs:', Array.from(state.activeScanIds));\n                console.log('Toast visible:', !!state.persistentToast);\n            };\n            \n            window.testScan = (id = 'test-scan-1') => {\n                console.log('🧪 Testing scan for ID:', id);\n                scanStateManager.startScanning([id]);\n            };\n            \n            console.log('🔍 Dashboard initialization complete');\n        };\n\n        init();\n    })();\n});\n</script>"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        260,
        240
      ],
      "id": "31384744-8578-4011-aff1-c8cc8f3b8ddc",
      "name": "JavaScript"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nlet tableRows = '';\n\nfor (const item of items) {\n  const data = item.json;\n\n  // --- 1. Status Badge Logic ---\n  let statusClass = 'info';\n  const statusCodeStr = String(data.status_code);\n  if (statusCodeStr.startsWith('2')) statusClass = 'success';\n  else if (statusCodeStr.startsWith('4') || statusCodeStr.startsWith('5')) statusClass = 'error';\n  else if (statusCodeStr.startsWith('3')) statusClass = 'redirect';\n  // Check for DNS/connection errors - use purple/magenta color\n  else if (statusCodeStr.includes('ECONNREFUSED') || \n           statusCodeStr.includes('ENOTFOUND') || \n           statusCodeStr.includes('EAI_AGAIN') ||\n           statusCodeStr.includes('EAIAGAIN') ||\n           statusCodeStr.includes('ENETUNREACH') ||\n           statusCodeStr.includes('ETIMEDOUT') ||\n           statusCodeStr.includes('ECONNRESET') ||\n           statusCodeStr.includes('ECONNABORTED')) statusClass = 'dns-error';\n  \n  const statusBadge = `<span class=\"status-badge status-${statusClass}\">${statusCodeStr}</span>`;\n\n  // --- 2. Page Assessment Tags Logic ---\n  const generateTagsHTML = (pageAssessment) => {\n    if (!pageAssessment || !Array.isArray(pageAssessment) || pageAssessment.length === 0) {\n      return '<div class=\"tags-container\"></div>';\n    }\n    \n    // Simple hash function for consistent colors\n    const hashString = (str) => {\n      let hash = 0;\n      for (let i = 0; i < str.length; i++) {\n        const char = str.charCodeAt(i);\n        hash = ((hash << 5) - hash) + char;\n        hash = hash & hash; // Convert to 32-bit integer\n      }\n      return Math.abs(hash) % 360;\n    };\n    \n    const tagBadges = pageAssessment.map(tag => {\n      // Clean tag for CSS class (lowercase, replace spaces/special chars with hyphens)\n      const cssClass = tag.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, '');\n      \n      // Format display text: remove hyphens, add spaces, uppercase\n      const displayText = tag.replace(/-/g, ' ').toUpperCase();\n      \n      // Generate consistent color hash for unknown tags\n      const colorHash = hashString(tag.toLowerCase());\n      \n      return `<span class=\"tag-badge tag-${cssClass}\" style=\"--tag-hash: ${colorHash}\">${displayText}</span>`;\n    }).join('');\n    \n    return `<div class=\"tags-container\">${tagBadges}</div>`;\n  };\n\n  const assessmentTags = generateTagsHTML(data.page_assessment);\n\n  // --- 3. Data Preparation ---\n  const summary = data.agent_summary ? data.agent_summary.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\") : '';\n  const displayUrl = data.url; // No more truncation\n  const externalLinkIcon = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"external-link-icon\"><path d=\"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\"></path><polyline points=\"15 3 21 3 21 9\"></polyline><line x1=\"10\" y1=\"14\" x2=\"21\" y2=\"3\"></line></svg>`;\n  const urlLink = data.url ? `<a href=\"${data.url}\" title=\"${data.url}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"link\"><span class=\"url-text\">${displayUrl}</span>${externalLinkIcon}</a>` : '';\n  \n  let screenshotContent = '';\n  if (data.screenshot_url) {\n    screenshotContent = `<img src=\"${data.screenshot_url}\" alt=\"Thumbnail for ${data.domain}\" class=\"screenshot-thumbnail\" data-full-src=\"${data.screenshot_url}\">`;\n  }\n\n  // --- 4. Individual Date and Source Columns ---\n  const formatDate = (dateStr) => {\n    if (!dateStr) return '';\n    try {\n      const date = new Date(dateStr);\n      return date.toLocaleString('en-US', { \n        year: 'numeric', \n        month: 'short', \n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: true\n      });\n    } catch {\n      return '';\n    }\n  };\n\n  const createdAt = formatDate(data.created_at);\n  const lastScanTime = formatDate(data.last_scan_time);\n  const sourceFilename = data.source_filename || 'Unknown source';\n\n  // --- 5. Build the Final HTML Table Row with Individual Columns ---\n  tableRows += `\n    <tr data-id=\"${data.id}\">\n      <td class=\"checkbox-cell\">\n        <input type=\"checkbox\" class=\"row-selector\" value=\"${data.id}\" title=\"Select this row\">\n      </td>\n      <td data-label=\"URL\">${urlLink}</td>\n      <td data-label=\"Status\">${statusBadge}</td>\n      <td data-label=\"Summary\">\n        <div class=\"summary-section\">\n          <p class=\"summary-text\">${summary}</p>\n        </div>\n      </td>\n      <td data-label=\"Tags\">${assessmentTags}</td>\n      <td data-label=\"Screenshot\">${screenshotContent}</td>\n      <td data-label=\"Created Date\">${createdAt}</td>\n      <td data-label=\"Last Scan\">${lastScanTime}</td>\n      <td data-label=\"Source\">${sourceFilename}</td>\n    </tr>\n  `;\n}\n\nreturn [{ json: { htmlRows: tableRows } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        500,
        0
      ],
      "id": "40fa3b83-716c-4dde-ac4c-b6b88301729a",
      "name": "Supabase TableRow Data",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>URL Scanner Dashboard</title>\n    \n    <!-- Supabase CDN for real-time functionality -->\n    <script src=\"https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2\"></script>\n    \n    <!-- n8n Expression to inject CSS from the 'CSS' node -->\n    {{ $('CSS').item.json.html }}\n</head>\n<body>\n    <div class=\"dashboard-container\">\n        <!-- Header Section -->\n        <header class=\"dashboard-header\">\n            <div class=\"header-content\">\n                <h1 class=\"dashboard-title\">URL Scanner Dashboard</h1>\n                <p class=\"dashboard-subtitle\">Monitor and analyze your URL scans with detailed reporting</p>\n            </div>\n        </header>\n\n        <!-- Main Content -->\n        <main class=\"dashboard-main\">\n            <!-- Controls Panel -->\n            <div class=\"controls-panel\">\n                <div class=\"controls-row\">\n                    <!-- Search Section -->\n                    <div class=\"search-section\">\n                        <div class=\"search-container\">\n                            <svg class=\"search-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                                <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\n                                <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line>\n                            </svg>\n                            <input type=\"text\" id=\"text-filter-input\" class=\"search-input\" placeholder=\"Search URLs, status, or content...\">\n                        </div>\n                    </div>\n\n                    <!-- Action Controls -->\n                    <div class=\"action-controls\">\n                        <!-- Table Actions Group -->\n                        <div class=\"control-group\">\n                            <div class=\"dropdown\">\n                                <button id=\"sort-button\" class=\"control-btn control-btn-secondary\">\n                                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                                        <path d=\"M3 6h18M6 12h18M9 18h18\"/>\n                                    </svg>\n                                    Sort\n                                </button>\n                                <div id=\"sort-dropdown\" class=\"dropdown-menu\">\n                                    <div class=\"dropdown-header\">Sort by</div>\n                                    <label class=\"dropdown-item\">\n                                        <input type=\"radio\" name=\"sort-option\" value=\"url\">\n                                        <span>URL (A-Z)</span>\n                                    </label>\n                                    <label class=\"dropdown-item\">\n                                        <input type=\"radio\" name=\"sort-option\" value=\"status\">\n                                        <span>Status Code</span>\n                                    </label>\n                                    <label class=\"dropdown-item\">\n                                        <input type=\"radio\" name=\"sort-option\" value=\"summary\">\n                                        <span>Has Summary</span>\n                                    </label>\n                                    <label class=\"dropdown-item\">\n                                        <input type=\"radio\" name=\"sort-option\" value=\"screenshot\">\n                                        <span>Has Screenshot</span>\n                                    </label>\n                                    <label class=\"dropdown-item\">\n                                      <input type=\"radio\" name=\"sort-option\" value=\"created_at\">\n                                      <span>Created Date</span>\n                                    </label>\n                                    <label class=\"dropdown-item\">\n                                        <input type=\"radio\" name=\"sort-option\" value=\"last_scan_time\">\n                                        <span>Last Scan Date</span>\n                                    </label>\n                                    <div class=\"dropdown-actions\">\n                                        <button id=\"clear-sort\" class=\"dropdown-btn dropdown-btn-ghost\">Clear</button>\n                                        <button id=\"apply-sort\" class=\"dropdown-btn dropdown-btn-primary\">Apply</button>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"dropdown\">\n                                <button id=\"filter-button\" class=\"control-btn control-btn-secondary\">\n                                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                                        <polygon points=\"22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3\"></polygon>\n                                    </svg>\n                                    Filters\n                                </button>\n                                <div id=\"filter-dropdown\" class=\"dropdown-menu\">\n                                    <div class=\"dropdown-header\">Filter by status</div>\n                                    <label class=\"dropdown-item\">\n                                        <input type=\"checkbox\" class=\"status-filter\" value=\"200\">\n                                        <span>Success (2xx)</span>\n                                    </label>\n                                    <label class=\"dropdown-item\">\n                                        <input type=\"checkbox\" class=\"status-filter\" value=\"403\">\n                                        <span>Forbidden (403)</span>\n                                    </label>\n                                    <label class=\"dropdown-item\">\n                                        <input type=\"checkbox\" class=\"status-filter\" value=\"404\">\n                                        <span>Not Found (404)</span>\n                                    </label>\n                                    <label class=\"dropdown-item\">\n                                        <input type=\"checkbox\" class=\"status-filter\" value=\"4xx\">\n                                        <span>Client Errors (4xx)</span>\n                                    </label>\n                                    <label class=\"dropdown-item\">\n                                        <input type=\"checkbox\" class=\"status-filter\" value=\"5xx\">\n                                        <span>Server Errors (5xx)</span>\n                                    </label>\n                                    <label class=\"dropdown-item\">\n                                        <input type=\"checkbox\" class=\"status-filter\" value=\"scanning\">\n                                        <span>Currently Scanning</span>\n                                    </label>\n                                    <label class=\"dropdown-item\">\n                                        <input type=\"checkbox\" class=\"status-filter\" value=\"dns-error\">\n                                        <span>DNS/Connection Error</span>\n                                    </label>\n                                    <label class=\"dropdown-item\">\n                                        <input type=\"checkbox\" class=\"status-filter\" value=\"null\">\n                                        <span>No Status</span>\n                                    </label>\n                                    <div class=\"dropdown-actions\">\n                                        <button id=\"clear-filters\" class=\"dropdown-btn dropdown-btn-ghost\">Clear</button>\n                                        <button id=\"apply-filters\" class=\"dropdown-btn dropdown-btn-primary\">Apply</button>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"dropdown\">\n                                <button id=\"export-button\" class=\"control-btn control-btn-secondary\">\n                                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                                        <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"></path>\n                                        <polyline points=\"7 10 12 15 17 10\"></polyline>\n                                        <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\"></line>\n                                    </svg>\n                                    Export\n                                </button>\n                                <div id=\"export-dropdown\" class=\"dropdown-menu\">\n                                    <div class=\"dropdown-header\">Export data</div>\n                                    <div id=\"export-csv\" class=\"dropdown-item dropdown-item-clickable\">\n                                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                                            <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\n                                            <polyline points=\"14 2 14 8 20 8\"></polyline>\n                                        </svg>\n                                        <span>Export as CSV</span>\n                                    </div>\n                                    <div id=\"export-json\" class=\"dropdown-item dropdown-item-clickable\">\n                                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                                            <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\n                                            <polyline points=\"14 2 14 8 20 8\"></polyline>\n                                        </svg>\n                                        <span>Export as JSON</span>\n                                    </div>\n                                    <div id=\"export-txt\" class=\"dropdown-item dropdown-item-clickable\">\n                                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                                            <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\n                                            <polyline points=\"14 2 14 8 20 8\"></polyline>\n                                            <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"></line>\n                                            <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"></line>\n                                        </svg>\n                                        <span>Export URLs (TXT)</span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <!-- Primary Actions Group -->\n                        <div class=\"control-group control-group-primary\">\n                            <button id=\"upload-button\" class=\"control-btn control-btn-secondary\">\n                                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                                    <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-15\"></path>\n                                    <polyline points=\"7 10 12 5 17 10\"></polyline>\n                                    <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"15\"></line>\n                                </svg>\n                                Upload URLs\n                            </button>\n                            <button id=\"scan-button\" class=\"control-btn control-btn-primary\">\n                                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                                    <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\n                                    <path d=\"M21 21l-4.35-4.35\"></path>\n                                </svg>\n                                Start Scan\n                            </button>\n                            <button id=\"delete-selected-button\" class=\"control-btn control-btn-destructive\">\n                                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                                    <path d=\"M3 6h18\"></path>\n                                    <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v2\"></path>\n                                    <line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line>\n                                    <line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line>\n                                </svg>\n                                Delete Selected\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Data Table -->\n            <div class=\"table-section\">\n                <div class=\"table-container\">\n                    <table class=\"data-table\">\n                      <thead>\n                          <tr>\n                              <th class=\"table-header table-header-checkbox\">\n                                  <input type=\"checkbox\" id=\"select-all-checkbox\" class=\"table-checkbox\" title=\"Select All\">\n                              </th>\n                              <th class=\"table-header\">URL</th>\n                              <th class=\"table-header\">Status</th>\n                              <th class=\"table-header\">Summary</th>\n                              <th class=\"table-header\">Tags</th>\n                              <th class=\"table-header\">Screenshot</th>\n                              <th class=\"table-header\">Created Date</th>\n                              <th class=\"table-header\">Last Scan</th>\n                              <th class=\"table-header\">Source</th>\n                          </tr>\n                      </thead>\n                      <tbody id=\"report-table-body\">\n                          <!-- n8n Expression to inject data rows from the 'Supabase TableRow Data' node -->\n                          {{ $('Supabase TableRow Data').item.json.htmlRows }}\n                      </tbody>\n                  </table>\n                    \n                    <!-- No Results Message -->\n                    <div id=\"no-results-message\" class=\"no-results\">\n                        <div class=\"no-results-content\">\n                            <svg width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" class=\"no-results-icon\">\n                                <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\n                                <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line>\n                            </svg>\n                            <h3 class=\"no-results-title\">No results found</h3>\n                            <p class=\"no-results-description\">Try adjusting your search terms or filters to find what you're looking for.</p>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Pagination -->\n                <div id=\"pagination-section\" class=\"pagination-container\">\n                    <div class=\"pagination-info\">\n                        <div class=\"pagination-select-wrapper\">\n                            <select id=\"items-per-page\" class=\"pagination-select\">\n                                <option value=\"25\">25 per page</option>\n                                <option value=\"50\" selected>50 per page</option>\n                                <option value=\"100\">100 per page</option>\n                                <option value=\"all\">Show all</option>\n                            </select>\n                        </div>\n                        <span id=\"pagination-text\" class=\"pagination-text\"></span>\n                    </div>\n                    <div class=\"pagination-controls\">\n                        <button id=\"first-page\" class=\"pagination-btn\" title=\"First page\">\n                            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                                <polygon points=\"19 20 9 12 19 4 19 20\"></polygon>\n                                <line x1=\"5\" y1=\"19\" x2=\"5\" y2=\"5\"></line>\n                            </svg>\n                        </button>\n                        <button id=\"prev-page\" class=\"pagination-btn\" title=\"Previous page\">\n                            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                                <polyline points=\"15 18 9 12 15 6\"></polyline>\n                            </svg>\n                        </button>\n                        <div id=\"page-numbers\" class=\"page-numbers\"></div>\n                        <button id=\"next-page\" class=\"pagination-btn\" title=\"Next page\">\n                            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                                <polyline points=\"9 18 15 12 9 6\"></polyline>\n                            </svg>\n                        </button>\n                        <button id=\"last-page\" class=\"pagination-btn\" title=\"Last page\">\n                            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                                <polygon points=\"5 4 15 12 5 20 5 4\"></polygon>\n                                <line x1=\"19\" y1=\"5\" x2=\"19\" y2=\"19\"></line>\n                            </svg>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </main>\n\n        <!-- Screenshot Modal -->\n        <div id=\"screenshot-modal\" class=\"modal-overlay\">\n            <div class=\"modal-backdrop\"></div>\n            <div class=\"modal-content\">\n                <img id=\"modal-image\" src=\"/placeholder.svg\" alt=\"Full size screenshot\" class=\"modal-image\">\n            </div>\n        </div>\n        \n    </div>\n\n    <!-- n8n Expression to inject JavaScript from the 'JavaScript' node -->\n    {{ $('JavaScript').item.json.html }}\n</body>\n</html>"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        500,
        240
      ],
      "id": "4252489c-dfa8-4953-9551-413650f8b9f0",
      "name": "HTML"
    },
    {
      "parameters": {
        "path": "dashboard",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        20,
        0
      ],
      "id": "830f73a6-75ed-4349-aa57-3c8f79a85603",
      "name": "Dashboard Webhook",
      "webhookId": "b440a37a-6726-4e02-8837-f378f59d59a2"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.html }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        740,
        240
      ],
      "id": "6d5dd260-a0f0-4353-b63f-fbca9cd37590",
      "name": "Rendered Page to Dashboard Webhook"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "url_scan",
        "returnAll": true,
        "filterType": "none"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        260,
        0
      ],
      "id": "895bcbbe-42cc-49dd-9d28-5140e685887a",
      "name": "Get Supabase Data to Create Table Rows",
      "alwaysOutputData": true
    }
  ],
  "pinData": {},
  "connections": {
    "Supabase TableRow Data": {
      "main": [
        [
          {
            "node": "CSS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JavaScript": {
      "main": [
        [
          {
            "node": "HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CSS": {
      "main": [
        [
          {
            "node": "JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML": {
      "main": [
        [
          {
            "node": "Rendered Page to Dashboard Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dashboard Webhook": {
      "main": [
        [
          {
            "node": "Get Supabase Data to Create Table Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Supabase Data to Create Table Rows": {
      "main": [
        [
          {
            "node": "Supabase TableRow Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ef182455-0849-44aa-91a2-e1060432b462",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "98e897a176d6aa8f9ebfef8f0306eab4fec5c697c6120f66479530a2b348cfea"
  },
  "id": "ZhYggxtuxpUxkpNn",
  "tags": [
    {
      "createdAt": "2025-06-25T12:13:47.940Z",
      "updatedAt": "2025-06-25T12:13:47.940Z",
      "id": "wOgwkqYbMpe5Jmqn",
      "name": "dashboard"
    },
    {
      "createdAt": "2025-06-25T12:13:47.977Z",
      "updatedAt": "2025-06-25T12:13:47.977Z",
      "id": "oxuNEP5M8e5DoYn0",
      "name": "ui"
    },
    {
      "createdAt": "2025-06-25T12:13:48.108Z",
      "updatedAt": "2025-06-25T12:13:48.108Z",
      "id": "4YcvySwtt3pCmIa4",
      "name": "vibe-code"
    }
  ]
}